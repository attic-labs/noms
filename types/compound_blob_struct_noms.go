// This file was generated by nomdl/codegen.

package types

import (
	"github.com/attic-labs/noms/chunks"
	"github.com/attic-labs/noms/ref"
)

var __typesPackageInFile_compound_blob_struct_CachedRef ref.Ref

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := NewPackage([]TypeRef{
		MakeStructTypeRef("compoundBlobStruct",
			[]Field{
				Field{"Offsets", MakeCompoundTypeRef(ListKind, MakePrimitiveTypeRef(UInt64Kind)), false},
				Field{"Blobs", MakeCompoundTypeRef(ListKind, MakeCompoundTypeRef(RefKind, MakePrimitiveTypeRef(BlobKind))), false},
			},
			Choices{},
		),
	}, []ref.Ref{})
	__typesPackageInFile_compound_blob_struct_CachedRef = RegisterPackage(&p)
}

// compoundBlobStruct

type compoundBlobStruct struct {
	m   Map
	ref *ref.Ref
}

func NewcompoundBlobStruct() compoundBlobStruct {
	return compoundBlobStruct{NewMap(
		NewString("Offsets"), NewListOfUInt64(),
		NewString("Blobs"), NewListOfRefOfBlob(),
	), &ref.Ref{}}
}

type compoundBlobStructDef struct {
	Offsets ListOfUInt64Def
	Blobs   ListOfRefOfBlobDef
}

func (def compoundBlobStructDef) New() compoundBlobStruct {
	return compoundBlobStruct{
		NewMap(
			NewString("Offsets"), def.Offsets.New(),
			NewString("Blobs"), def.Blobs.New(),
		), &ref.Ref{}}
}

func (s compoundBlobStruct) Def() (d compoundBlobStructDef) {
	d.Offsets = s.m.Get(NewString("Offsets")).(ListOfUInt64).Def()
	d.Blobs = s.m.Get(NewString("Blobs")).(ListOfRefOfBlob).Def()
	return
}

var __typeRefForcompoundBlobStruct TypeRef

func (m compoundBlobStruct) TypeRef() TypeRef {
	return __typeRefForcompoundBlobStruct
}

func init() {
	__typeRefForcompoundBlobStruct = MakeTypeRef(__typesPackageInFile_compound_blob_struct_CachedRef, 0)
	RegisterFromValFunction(__typeRefForcompoundBlobStruct, func(v Value) Value {
		return compoundBlobStructFromVal(v)
	})
}

func compoundBlobStructFromVal(val Value) compoundBlobStruct {
	// TODO: Do we still need FromVal?
	if val, ok := val.(compoundBlobStruct); ok {
		return val
	}
	// TODO: Validate here
	return compoundBlobStruct{val.(Map), &ref.Ref{}}
}

func (s compoundBlobStruct) InternalImplementation() Map {
	return s.m
}

func (s compoundBlobStruct) Equals(other Value) bool {
	return other != nil && s.Ref() == other.Ref()
}

func (s compoundBlobStruct) Ref() ref.Ref {
	return EnsureRef(s.ref, s)
}

func (s compoundBlobStruct) Chunks() (chunks []ref.Ref) {
	chunks = append(chunks, s.TypeRef().Chunks()...)
	chunks = append(chunks, s.m.Chunks()...)
	return
}

func (s compoundBlobStruct) Offsets() ListOfUInt64 {
	return s.m.Get(NewString("Offsets")).(ListOfUInt64)
}

func (s compoundBlobStruct) SetOffsets(val ListOfUInt64) compoundBlobStruct {
	return compoundBlobStruct{s.m.Set(NewString("Offsets"), val), &ref.Ref{}}
}

func (s compoundBlobStruct) Blobs() ListOfRefOfBlob {
	return s.m.Get(NewString("Blobs")).(ListOfRefOfBlob)
}

func (s compoundBlobStruct) SetBlobs(val ListOfRefOfBlob) compoundBlobStruct {
	return compoundBlobStruct{s.m.Set(NewString("Blobs"), val), &ref.Ref{}}
}

// ListOfUInt64

type ListOfUInt64 struct {
	l   List
	ref *ref.Ref
}

func NewListOfUInt64() ListOfUInt64 {
	return ListOfUInt64{NewList(), &ref.Ref{}}
}

type ListOfUInt64Def []uint64

func (def ListOfUInt64Def) New() ListOfUInt64 {
	l := make([]Value, len(def))
	for i, d := range def {
		l[i] = UInt64(d)
	}
	return ListOfUInt64{NewList(l...), &ref.Ref{}}
}

func (l ListOfUInt64) Def() ListOfUInt64Def {
	d := make([]uint64, l.Len())
	for i := uint64(0); i < l.Len(); i++ {
		d[i] = uint64(l.l.Get(i).(UInt64))
	}
	return d
}

func ListOfUInt64FromVal(val Value) ListOfUInt64 {
	// TODO: Do we still need FromVal?
	if val, ok := val.(ListOfUInt64); ok {
		return val
	}
	// TODO: Validate here
	return ListOfUInt64{val.(List), &ref.Ref{}}
}

func (l ListOfUInt64) InternalImplementation() List {
	return l.l
}

func (l ListOfUInt64) Equals(other Value) bool {
	return other != nil && l.Ref() == other.Ref()
}

func (l ListOfUInt64) Ref() ref.Ref {
	return EnsureRef(l.ref, l)
}

func (l ListOfUInt64) Chunks() (chunks []ref.Ref) {
	chunks = append(chunks, l.TypeRef().Chunks()...)
	chunks = append(chunks, l.l.Chunks()...)
	return
}

// A Noms Value that describes ListOfUInt64.
var __typeRefForListOfUInt64 TypeRef

func (m ListOfUInt64) TypeRef() TypeRef {
	return __typeRefForListOfUInt64
}

func init() {
	__typeRefForListOfUInt64 = MakeCompoundTypeRef(ListKind, MakePrimitiveTypeRef(UInt64Kind))
	RegisterFromValFunction(__typeRefForListOfUInt64, func(v Value) Value {
		return ListOfUInt64FromVal(v)
	})
}

func (l ListOfUInt64) Len() uint64 {
	return l.l.Len()
}

func (l ListOfUInt64) Empty() bool {
	return l.Len() == uint64(0)
}

func (l ListOfUInt64) Get(i uint64) uint64 {
	return uint64(l.l.Get(i).(UInt64))
}

func (l ListOfUInt64) Slice(idx uint64, end uint64) ListOfUInt64 {
	return ListOfUInt64{l.l.Slice(idx, end), &ref.Ref{}}
}

func (l ListOfUInt64) Set(i uint64, val uint64) ListOfUInt64 {
	return ListOfUInt64{l.l.Set(i, UInt64(val)), &ref.Ref{}}
}

func (l ListOfUInt64) Append(v ...uint64) ListOfUInt64 {
	return ListOfUInt64{l.l.Append(l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfUInt64) Insert(idx uint64, v ...uint64) ListOfUInt64 {
	return ListOfUInt64{l.l.Insert(idx, l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfUInt64) Remove(idx uint64, end uint64) ListOfUInt64 {
	return ListOfUInt64{l.l.Remove(idx, end), &ref.Ref{}}
}

func (l ListOfUInt64) RemoveAt(idx uint64) ListOfUInt64 {
	return ListOfUInt64{(l.l.RemoveAt(idx)), &ref.Ref{}}
}

func (l ListOfUInt64) fromElemSlice(p []uint64) []Value {
	r := make([]Value, len(p))
	for i, v := range p {
		r[i] = UInt64(v)
	}
	return r
}

type ListOfUInt64IterCallback func(v uint64, i uint64) (stop bool)

func (l ListOfUInt64) Iter(cb ListOfUInt64IterCallback) {
	l.l.Iter(func(v Value, i uint64) bool {
		return cb(uint64(v.(UInt64)), i)
	})
}

type ListOfUInt64IterAllCallback func(v uint64, i uint64)

func (l ListOfUInt64) IterAll(cb ListOfUInt64IterAllCallback) {
	l.l.IterAll(func(v Value, i uint64) {
		cb(uint64(v.(UInt64)), i)
	})
}

type ListOfUInt64FilterCallback func(v uint64, i uint64) (keep bool)

func (l ListOfUInt64) Filter(cb ListOfUInt64FilterCallback) ListOfUInt64 {
	nl := NewListOfUInt64()
	l.IterAll(func(v uint64, i uint64) {
		if cb(v, i) {
			nl = nl.Append(v)
		}
	})
	return nl
}

// ListOfRefOfBlob

type ListOfRefOfBlob struct {
	l   List
	ref *ref.Ref
}

func NewListOfRefOfBlob() ListOfRefOfBlob {
	return ListOfRefOfBlob{NewList(), &ref.Ref{}}
}

type ListOfRefOfBlobDef []ref.Ref

func (def ListOfRefOfBlobDef) New() ListOfRefOfBlob {
	l := make([]Value, len(def))
	for i, d := range def {
		l[i] = NewRefOfBlob(d)
	}
	return ListOfRefOfBlob{NewList(l...), &ref.Ref{}}
}

func (l ListOfRefOfBlob) Def() ListOfRefOfBlobDef {
	d := make([]ref.Ref, l.Len())
	for i := uint64(0); i < l.Len(); i++ {
		d[i] = l.l.Get(i).(RefOfBlob).TargetRef()
	}
	return d
}

func ListOfRefOfBlobFromVal(val Value) ListOfRefOfBlob {
	// TODO: Do we still need FromVal?
	if val, ok := val.(ListOfRefOfBlob); ok {
		return val
	}
	// TODO: Validate here
	return ListOfRefOfBlob{val.(List), &ref.Ref{}}
}

func (l ListOfRefOfBlob) InternalImplementation() List {
	return l.l
}

func (l ListOfRefOfBlob) Equals(other Value) bool {
	return other != nil && l.Ref() == other.Ref()
}

func (l ListOfRefOfBlob) Ref() ref.Ref {
	return EnsureRef(l.ref, l)
}

func (l ListOfRefOfBlob) Chunks() (chunks []ref.Ref) {
	chunks = append(chunks, l.TypeRef().Chunks()...)
	chunks = append(chunks, l.l.Chunks()...)
	return
}

// A Noms Value that describes ListOfRefOfBlob.
var __typeRefForListOfRefOfBlob TypeRef

func (m ListOfRefOfBlob) TypeRef() TypeRef {
	return __typeRefForListOfRefOfBlob
}

func init() {
	__typeRefForListOfRefOfBlob = MakeCompoundTypeRef(ListKind, MakeCompoundTypeRef(RefKind, MakePrimitiveTypeRef(BlobKind)))
	RegisterFromValFunction(__typeRefForListOfRefOfBlob, func(v Value) Value {
		return ListOfRefOfBlobFromVal(v)
	})
}

func (l ListOfRefOfBlob) Len() uint64 {
	return l.l.Len()
}

func (l ListOfRefOfBlob) Empty() bool {
	return l.Len() == uint64(0)
}

func (l ListOfRefOfBlob) Get(i uint64) RefOfBlob {
	return l.l.Get(i).(RefOfBlob)
}

func (l ListOfRefOfBlob) Slice(idx uint64, end uint64) ListOfRefOfBlob {
	return ListOfRefOfBlob{l.l.Slice(idx, end), &ref.Ref{}}
}

func (l ListOfRefOfBlob) Set(i uint64, val RefOfBlob) ListOfRefOfBlob {
	return ListOfRefOfBlob{l.l.Set(i, val), &ref.Ref{}}
}

func (l ListOfRefOfBlob) Append(v ...RefOfBlob) ListOfRefOfBlob {
	return ListOfRefOfBlob{l.l.Append(l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfRefOfBlob) Insert(idx uint64, v ...RefOfBlob) ListOfRefOfBlob {
	return ListOfRefOfBlob{l.l.Insert(idx, l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfRefOfBlob) Remove(idx uint64, end uint64) ListOfRefOfBlob {
	return ListOfRefOfBlob{l.l.Remove(idx, end), &ref.Ref{}}
}

func (l ListOfRefOfBlob) RemoveAt(idx uint64) ListOfRefOfBlob {
	return ListOfRefOfBlob{(l.l.RemoveAt(idx)), &ref.Ref{}}
}

func (l ListOfRefOfBlob) fromElemSlice(p []RefOfBlob) []Value {
	r := make([]Value, len(p))
	for i, v := range p {
		r[i] = v
	}
	return r
}

type ListOfRefOfBlobIterCallback func(v RefOfBlob, i uint64) (stop bool)

func (l ListOfRefOfBlob) Iter(cb ListOfRefOfBlobIterCallback) {
	l.l.Iter(func(v Value, i uint64) bool {
		return cb(v.(RefOfBlob), i)
	})
}

type ListOfRefOfBlobIterAllCallback func(v RefOfBlob, i uint64)

func (l ListOfRefOfBlob) IterAll(cb ListOfRefOfBlobIterAllCallback) {
	l.l.IterAll(func(v Value, i uint64) {
		cb(v.(RefOfBlob), i)
	})
}

type ListOfRefOfBlobFilterCallback func(v RefOfBlob, i uint64) (keep bool)

func (l ListOfRefOfBlob) Filter(cb ListOfRefOfBlobFilterCallback) ListOfRefOfBlob {
	nl := NewListOfRefOfBlob()
	l.IterAll(func(v RefOfBlob, i uint64) {
		if cb(v, i) {
			nl = nl.Append(v)
		}
	})
	return nl
}

// RefOfBlob

type RefOfBlob struct {
	target ref.Ref
	ref    *ref.Ref
}

func NewRefOfBlob(target ref.Ref) RefOfBlob {
	return RefOfBlob{target, &ref.Ref{}}
}

func (r RefOfBlob) TargetRef() ref.Ref {
	return r.target
}

func (r RefOfBlob) Ref() ref.Ref {
	return EnsureRef(r.ref, r)
}

func (r RefOfBlob) Equals(other Value) bool {
	return other != nil && r.Ref() == other.Ref()
}

func (r RefOfBlob) Chunks() []ref.Ref {
	return r.TypeRef().Chunks()
}

func RefOfBlobFromVal(val Value) RefOfBlob {
	// TODO: Do we still need FromVal?
	if val, ok := val.(RefOfBlob); ok {
		return val
	}
	return NewRefOfBlob(val.(Ref).TargetRef())
}

// A Noms Value that describes RefOfBlob.
var __typeRefForRefOfBlob TypeRef

func (m RefOfBlob) TypeRef() TypeRef {
	return __typeRefForRefOfBlob
}

func init() {
	__typeRefForRefOfBlob = MakeCompoundTypeRef(RefKind, MakePrimitiveTypeRef(BlobKind))
	RegisterFromValFunction(__typeRefForRefOfBlob, func(v Value) Value {
		return RefOfBlobFromVal(v)
	})
}

func (r RefOfBlob) TargetValue(cs chunks.ChunkSource) Blob {
	return ReadValue(r.target, cs).(Blob)
}

func (r RefOfBlob) SetTargetValue(val Blob, cs chunks.ChunkSink) RefOfBlob {
	return NewRefOfBlob(WriteValue(val, cs))
}
