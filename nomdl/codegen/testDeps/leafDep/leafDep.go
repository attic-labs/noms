// This file was generated by nomdl/codegen.

package test

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

var __testPackageInFile_leafDep_CachedRef ref.Ref

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]types.TypeRef{
		types.MakeStructTypeRef("S",
			[]types.Field{
				types.Field{"s", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"b", types.MakePrimitiveTypeRef(types.BoolKind), false},
			},
			types.Choices{},
		),
		types.MakeEnumTypeRef("E", "e1", "e2", "e3"),
	}, []ref.Ref{})
	__testPackageInFile_leafDep_CachedRef = types.RegisterPackage(&p)
}

// S

type S struct {
	m   types.Map
	ref *ref.Ref
}

func NewS() S {
	return S{types.NewMap(
		types.NewString("s"), types.NewString(""),
		types.NewString("b"), types.Bool(false),
	), &ref.Ref{}}
}

type SDef struct {
	S string
	B bool
}

func (def SDef) New() S {
	return S{
		types.NewMap(
			types.NewString("s"), types.NewString(def.S),
			types.NewString("b"), types.Bool(def.B),
		), &ref.Ref{}}
}

func (s S) Def() (d SDef) {
	d.S = s.m.Get(types.NewString("s")).(types.String).String()
	d.B = bool(s.m.Get(types.NewString("b")).(types.Bool))
	return
}

var __typeRefForS types.TypeRef

func (m S) TypeRef() types.TypeRef {
	return __typeRefForS
}

func init() {
	__typeRefForS = types.MakeTypeRef(__testPackageInFile_leafDep_CachedRef, 0)
	types.RegisterFromValFunction(__typeRefForS, func(v types.Value) types.Value {
		return SFromVal(v)
	})
}

func SFromVal(val types.Value) S {
	// TODO: Do we still need FromVal?
	if val, ok := val.(S); ok {
		return val
	}
	// TODO: Validate here
	return S{val.(types.Map), &ref.Ref{}}
}

func (s S) InternalImplementation() types.Map {
	return s.m
}

func (s S) Equals(other types.Value) bool {
	if other, ok := other.(S); ok {
		return s.Ref() == other.Ref()
	}
	return false
}

func (s S) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s S) Chunks() (chunks []ref.Ref) {
	chunks = append(chunks, s.TypeRef().Chunks()...)
	chunks = append(chunks, s.m.Chunks()...)
	return
}

func (s S) S() string {
	return s.m.Get(types.NewString("s")).(types.String).String()
}

func (s S) SetS(val string) S {
	return S{s.m.Set(types.NewString("s"), types.NewString(val)), &ref.Ref{}}
}

func (s S) B() bool {
	return bool(s.m.Get(types.NewString("b")).(types.Bool))
}

func (s S) SetB(val bool) S {
	return S{s.m.Set(types.NewString("b"), types.Bool(val)), &ref.Ref{}}
}

// E

type E uint32

const (
	E1 E = iota
	E2
	E3
)

func NewE() E {
	return E(0)
}

var __typeRefForE types.TypeRef

func (e E) TypeRef() types.TypeRef {
	return __typeRefForE
}

func init() {
	__typeRefForE = types.MakeTypeRef(__testPackageInFile_leafDep_CachedRef, 1)
	types.RegisterFromValFunction(__typeRefForE, func(v types.Value) types.Value {
		return E(uint32(v.(types.UInt32)))
	})
}

func (e E) InternalImplementation() uint32 {
	return uint32(e)
}

func (e E) Equals(other types.Value) bool {
	if other, ok := other.(E); ok {
		return e == other
	}
	return false
}

func (e E) Ref() ref.Ref {
	throwaway := ref.Ref{}
	return types.EnsureRef(&throwaway, e)
}

func (e E) Chunks() []ref.Ref {
	return nil
}
