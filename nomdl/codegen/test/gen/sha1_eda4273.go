// This file was generated by nomdl/codegen.

package gen

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]types.Type{
		types.MakeStructType("D",
			[]types.Field{
				types.Field{"structField", types.MakeType(ref.Parse("sha1-1c216c6f1d6989e4ede5f78b7689214948dabeef"), 0), false},
				types.Field{"enumField", types.MakeType(ref.Parse("sha1-1c216c6f1d6989e4ede5f78b7689214948dabeef"), 1), false},
			},
			types.Choices{},
		),
		types.MakeStructType("DUser",
			[]types.Field{
				types.Field{"Dfield", types.MakeType(ref.Ref{}, 0), false},
			},
			types.Choices{},
		),
	}, []ref.Ref{
		ref.Parse("sha1-1c216c6f1d6989e4ede5f78b7689214948dabeef"),
	})
	types.RegisterPackage(&p)
}

// D

type D struct {
	_structField S
	_enumField   E

	ref *ref.Ref
}

func NewD() D {
	return D{
		_structField: NewS(),
		_enumField:   NewE(),

		ref: &ref.Ref{},
	}
}

type DDef struct {
	StructField SDef
	EnumField   E
}

func (def DDef) New() D {
	return D{
		_structField: def.StructField.New(),
		_enumField:   def.EnumField,
		ref:          &ref.Ref{},
	}
}

func (s D) Def() (d DDef) {
	d.StructField = s._structField.Def()
	d.EnumField = s._enumField
	return
}

var __typeForD types.Type

func (m D) Type() types.Type {
	return __typeForD
}

func init() {
	__typeForD = types.MakeType(ref.Parse("sha1-eda4273cba9d5d4a1bccf41bcaec64743863cde0"), 0)
	types.RegisterStruct(__typeForD, builderForD, readerForD)
}

func builderForD(values []types.Value) types.Value {
	i := 0
	s := D{ref: &ref.Ref{}}
	s._structField = values[i].(S)
	i++
	s._enumField = values[i].(E)
	i++
	return s
}

func readerForD(v types.Value) []types.Value {
	values := []types.Value{}
	s := v.(D)
	values = append(values, s._structField)
	values = append(values, s._enumField)
	return values
}

func (s D) Equals(other types.Value) bool {
	return other != nil && __typeForD.Equals(other.Type()) && s.Ref() == other.Ref()
}

func (s D) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s D) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, __typeForD.Chunks()...)
	chunks = append(chunks, s._structField.Chunks()...)
	return
}

func (s D) ChildValues() (ret []types.Value) {
	ret = append(ret, s._structField)
	ret = append(ret, s._enumField)
	return
}

func (s D) StructField() S {
	return s._structField
}

func (s D) SetStructField(val S) D {
	s._structField = val
	s.ref = &ref.Ref{}
	return s
}

func (s D) EnumField() E {
	return s._enumField
}

func (s D) SetEnumField(val E) D {
	s._enumField = val
	s.ref = &ref.Ref{}
	return s
}

// DUser

type DUser struct {
	_Dfield D

	ref *ref.Ref
}

func NewDUser() DUser {
	return DUser{
		_Dfield: NewD(),

		ref: &ref.Ref{},
	}
}

type DUserDef struct {
	Dfield DDef
}

func (def DUserDef) New() DUser {
	return DUser{
		_Dfield: def.Dfield.New(),
		ref:     &ref.Ref{},
	}
}

func (s DUser) Def() (d DUserDef) {
	d.Dfield = s._Dfield.Def()
	return
}

var __typeForDUser types.Type

func (m DUser) Type() types.Type {
	return __typeForDUser
}

func init() {
	__typeForDUser = types.MakeType(ref.Parse("sha1-eda4273cba9d5d4a1bccf41bcaec64743863cde0"), 1)
	types.RegisterStruct(__typeForDUser, builderForDUser, readerForDUser)
}

func builderForDUser(values []types.Value) types.Value {
	i := 0
	s := DUser{ref: &ref.Ref{}}
	s._Dfield = values[i].(D)
	i++
	return s
}

func readerForDUser(v types.Value) []types.Value {
	values := []types.Value{}
	s := v.(DUser)
	values = append(values, s._Dfield)
	return values
}

func (s DUser) Equals(other types.Value) bool {
	return other != nil && __typeForDUser.Equals(other.Type()) && s.Ref() == other.Ref()
}

func (s DUser) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s DUser) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, __typeForDUser.Chunks()...)
	chunks = append(chunks, s._Dfield.Chunks()...)
	return
}

func (s DUser) ChildValues() (ret []types.Value) {
	ret = append(ret, s._Dfield)
	return
}

func (s DUser) Dfield() D {
	return s._Dfield
}

func (s DUser) SetDfield(val D) DUser {
	s._Dfield = val
	s.ref = &ref.Ref{}
	return s
}
