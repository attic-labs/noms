// This file was generated by nomdl/codegen.
// @flow
/* eslint-disable */

import {
  Field as _Field,
  Kind as _Kind,
  Package as _Package,
  createStructClass as _createStructClass,
  makeCompoundType as _makeCompoundType,
  makeListType as _makeListType,
  makeSetType as _makeSetType,
  makeStructType as _makeStructType,
  makeType as _makeType,
  newList as _newList,
  newSet as _newSet,
  numberType as _numberType,
  registerPackage as _registerPackage,
  stringType as _stringType,
} from '@attic/noms';
import type {
  NomsList as _NomsList,
  NomsSet as _NomsSet,
  RefValue as _RefValue,
  Struct as _Struct,
  number as _number,
} from '@attic/noms';

const _pkg = new _Package([
  _makeStructType('StructWithRef',
    [
      new _Field('r', _makeCompoundType(_Kind.Ref, _makeCompoundType(_Kind.Set, _numberType)), false),
    ],
    [

    ]
  ),
], [
]);
_registerPackage(_pkg);
const StructWithRef$type = _makeType(_pkg.ref, 0);
const StructWithRef$typeDef = _pkg.types[0];


type StructWithRef$Data = {
  r: _RefValue<_NomsSet<_number>>;
};

interface StructWithRef$Interface extends _Struct {
  constructor(data: StructWithRef$Data): void;
  r: _RefValue<_NomsSet<_number>>;  // readonly
  setR(value: _RefValue<_NomsSet<_number>>): StructWithRef$Interface;
}

export const StructWithRef: Class<StructWithRef$Interface> = _createStructClass(StructWithRef$type, StructWithRef$typeDef);

export function newListOfRefOfNumber(values: Array<_RefValue<_number>>): Promise<_NomsList<_RefValue<_number>>> {
  return _newList(values, _makeListType(_makeCompoundType(_Kind.Ref, _numberType)));
}

export function newListOfString(values: Array<string>): Promise<_NomsList<string>> {
  return _newList(values, _makeListType(_stringType));
}

export function newSetOfNumber(values: Array<_number>): Promise<_NomsSet<_number>> {
  return _newSet(values, _makeSetType(_numberType));
}
