// This file was generated by nomdl/codegen.

package gen

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]types.Type{
		types.MakeEnumType("LocalE", "LocalE1", "Ignored"),
		types.MakeStructType("ImportUser",
			[]types.Field{
				types.Field{"importedStruct", types.MakeType(ref.Parse("sha1-eda4273cba9d5d4a1bccf41bcaec64743863cde0"), 0), false},
				types.Field{"enum", types.MakeType(ref.Ref{}, 0), false},
			},
			types.Choices{},
		),
	}, []ref.Ref{
		ref.Parse("sha1-eda4273cba9d5d4a1bccf41bcaec64743863cde0"),
	})
	types.RegisterPackage(&p)
}

// LocalE

type LocalE uint32

const (
	LocalE1 LocalE = iota
	Ignored
)

func NewLocalE() LocalE {
	return LocalE(0)
}

var __typeForLocalE types.Type

func (e LocalE) Type() types.Type {
	return __typeForLocalE
}

func init() {
	__typeForLocalE = types.MakeType(ref.Parse("sha1-406c3f71fd59ab208bb2d427e0b1b8ab6ebc6130"), 0)
	types.RegisterEnum(__typeForLocalE, builderForLocalE, readerForLocalE)
}

func builderForLocalE(v uint32) types.Value {
	return LocalE(v)
}

func readerForLocalE(v types.Value) uint32 {
	return uint32(v.(LocalE))
}

func (e LocalE) Equals(other types.Value) bool {
	return e == other
}

func (e LocalE) Ref() ref.Ref {
	throwaway := ref.Ref{}
	return types.EnsureRef(&throwaway, e)
}

func (e LocalE) Chunks() []types.RefBase {
	return nil
}

func (e LocalE) ChildValues() []types.Value {
	return nil
}

// ImportUser

type ImportUser struct {
	_importedStruct D
	_enum           LocalE

	ref *ref.Ref
}

func NewImportUser() ImportUser {
	return ImportUser{
		_importedStruct: NewD(),
		_enum:           NewLocalE(),

		ref: &ref.Ref{},
	}
}

type ImportUserDef struct {
	ImportedStruct DDef
	Enum           LocalE
}

func (def ImportUserDef) New() ImportUser {
	return ImportUser{
		_importedStruct: def.ImportedStruct.New(),
		_enum:           def.Enum,
		ref:             &ref.Ref{},
	}
}

func (s ImportUser) Def() (d ImportUserDef) {
	d.ImportedStruct = s._importedStruct.Def()
	d.Enum = s._enum
	return
}

var __typeForImportUser types.Type

func (m ImportUser) Type() types.Type {
	return __typeForImportUser
}

func init() {
	__typeForImportUser = types.MakeType(ref.Parse("sha1-406c3f71fd59ab208bb2d427e0b1b8ab6ebc6130"), 1)
	types.RegisterStruct(__typeForImportUser, builderForImportUser, readerForImportUser)
}

func builderForImportUser(values []types.Value) types.Value {
	i := 0
	s := ImportUser{ref: &ref.Ref{}}
	s._importedStruct = values[i].(D)
	i++
	s._enum = values[i].(LocalE)
	i++
	return s
}

func readerForImportUser(v types.Value) []types.Value {
	values := []types.Value{}
	s := v.(ImportUser)
	values = append(values, s._importedStruct)
	values = append(values, s._enum)
	return values
}

func (s ImportUser) Equals(other types.Value) bool {
	return other != nil && __typeForImportUser.Equals(other.Type()) && s.Ref() == other.Ref()
}

func (s ImportUser) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s ImportUser) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, __typeForImportUser.Chunks()...)
	chunks = append(chunks, s._importedStruct.Chunks()...)
	return
}

func (s ImportUser) ChildValues() (ret []types.Value) {
	ret = append(ret, s._importedStruct)
	ret = append(ret, s._enum)
	return
}

func (s ImportUser) ImportedStruct() D {
	return s._importedStruct
}

func (s ImportUser) SetImportedStruct(val D) ImportUser {
	s._importedStruct = val
	s.ref = &ref.Ref{}
	return s
}

func (s ImportUser) Enum() LocalE {
	return s._enum
}

func (s ImportUser) SetEnum(val LocalE) ImportUser {
	s._enum = val
	s.ref = &ref.Ref{}
	return s
}

// ListOfD

type ListOfD struct {
	l   types.List
	ref *ref.Ref
}

func NewListOfD() ListOfD {
	return ListOfD{types.NewTypedList(__typeForListOfD), &ref.Ref{}}
}

type ListOfDDef []DDef

func (def ListOfDDef) New() ListOfD {
	l := make([]types.Value, len(def))
	for i, d := range def {
		l[i] = d.New()
	}
	return ListOfD{types.NewTypedList(__typeForListOfD, l...), &ref.Ref{}}
}

func (l ListOfD) Def() ListOfDDef {
	d := make([]DDef, l.Len())
	for i := uint64(0); i < l.Len(); i++ {
		d[i] = l.l.Get(i).(D).Def()
	}
	return d
}

func (l ListOfD) Equals(other types.Value) bool {
	return other != nil && __typeForListOfD.Equals(other.Type()) && l.Ref() == other.Ref()
}

func (l ListOfD) Ref() ref.Ref {
	return types.EnsureRef(l.ref, l)
}

func (l ListOfD) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, l.Type().Chunks()...)
	chunks = append(chunks, l.l.Chunks()...)
	return
}

func (l ListOfD) ChildValues() []types.Value {
	return append([]types.Value{}, l.l.ChildValues()...)
}

// A Noms Value that describes ListOfD.
var __typeForListOfD types.Type

func (m ListOfD) Type() types.Type {
	return __typeForListOfD
}

func init() {
	__typeForListOfD = types.MakeCompoundType(types.ListKind, types.MakeType(ref.Parse("sha1-eda4273cba9d5d4a1bccf41bcaec64743863cde0"), 0))
	types.RegisterValue(__typeForListOfD, builderForListOfD, readerForListOfD)
}

func builderForListOfD(v types.Value) types.Value {
	return ListOfD{v.(types.List), &ref.Ref{}}
}

func readerForListOfD(v types.Value) types.Value {
	return v.(ListOfD).l
}

func (l ListOfD) Len() uint64 {
	return l.l.Len()
}

func (l ListOfD) Empty() bool {
	return l.Len() == uint64(0)
}

func (l ListOfD) Get(i uint64) D {
	return l.l.Get(i).(D)
}

func (l ListOfD) Slice(idx uint64, end uint64) ListOfD {
	return ListOfD{l.l.Slice(idx, end), &ref.Ref{}}
}

func (l ListOfD) Set(i uint64, val D) ListOfD {
	return ListOfD{l.l.Set(i, val), &ref.Ref{}}
}

func (l ListOfD) Append(v ...D) ListOfD {
	return ListOfD{l.l.Append(l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfD) Insert(idx uint64, v ...D) ListOfD {
	return ListOfD{l.l.Insert(idx, l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfD) Remove(idx uint64, end uint64) ListOfD {
	return ListOfD{l.l.Remove(idx, end), &ref.Ref{}}
}

func (l ListOfD) RemoveAt(idx uint64) ListOfD {
	return ListOfD{(l.l.RemoveAt(idx)), &ref.Ref{}}
}

func (l ListOfD) fromElemSlice(p []D) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v
	}
	return r
}

type ListOfDIterCallback func(v D, i uint64) (stop bool)

func (l ListOfD) Iter(cb ListOfDIterCallback) {
	l.l.Iter(func(v types.Value, i uint64) bool {
		return cb(v.(D), i)
	})
}

type ListOfDIterAllCallback func(v D, i uint64)

func (l ListOfD) IterAll(cb ListOfDIterAllCallback) {
	l.l.IterAll(func(v types.Value, i uint64) {
		cb(v.(D), i)
	})
}

func (l ListOfD) IterAllP(concurrency int, cb ListOfDIterAllCallback) {
	l.l.IterAllP(concurrency, func(v types.Value, i uint64) {
		cb(v.(D), i)
	})
}

type ListOfDFilterCallback func(v D, i uint64) (keep bool)

func (l ListOfD) Filter(cb ListOfDFilterCallback) ListOfD {
	out := l.l.Filter(func(v types.Value, i uint64) bool {
		return cb(v.(D), i)
	})
	return ListOfD{out, &ref.Ref{}}
}
