// This file was generated by nomdl/codegen.
// @flow
/* eslint-disable */

import {
  Field as _Field,
  Kind as _Kind,
  Package as _Package,
  boolType as _boolType,
  createStructClass as _createStructClass,
  makeCompoundType as _makeCompoundType,
  makeListType as _makeListType,
  makeStructType as _makeStructType,
  makeType as _makeType,
  newList as _newList,
  numberType as _numberType,
  registerPackage as _registerPackage,
  stringType as _stringType,
} from '@attic/noms';
import type {
  NomsList as _NomsList,
  Struct as _Struct,
  number as _number,
} from '@attic/noms';

const _pkg = new _Package([
  _makeStructType('StructWithList',
    [
      new _Field('l', _makeCompoundType(_Kind.List, _number), false),
      new _Field('b', _boolType, false),
      new _Field('s', _stringType, false),
      new _Field('i', _number, false),
    ],
    [

    ]
  ),
], [
]);
_registerPackage(_pkg);
const StructWithList$type = _makeType(_pkg.ref, 0);
const StructWithList$typeDef = _pkg.types[0];


type StructWithList$Data = {
  l: _NomsList<_number>;
  b: boolean;
  s: string;
  i: _number;
};

interface StructWithList$Interface extends _Struct {
  constructor(data: StructWithList$Data): void;
  l: _NomsList<_number>;  // readonly
  setL(value: _NomsList<_number>): StructWithList$Interface;
  b: boolean;  // readonly
  setB(value: boolean): StructWithList$Interface;
  s: string;  // readonly
  setS(value: string): StructWithList$Interface;
  i: _int64;  // readonly
  setI(value: _number): StructWithList$Interface;
}

export const StructWithList: Class<StructWithList$Interface> = _createStructClass(StructWithList$type, StructWithList$typeDef);

export function newListOfNumber(values: Array<_number>): Promise<_NomsList<_number>> {
  return _newList(values, _makeListType(_numberType));
}
