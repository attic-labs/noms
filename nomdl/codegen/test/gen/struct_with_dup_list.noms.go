// This file was generated by nomdl/codegen.

package gen

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

var __genPackageInFile_struct_with_dup_list_CachedRef ref.Ref

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]types.Type{
		types.MakeStructType("StructWithDupList",
			[]types.Field{
				types.Field{"l", types.MakeCompoundType(types.ListKind, types.MakePrimitiveType(types.Uint8Kind)), false},
			},
			types.Choices{},
		),
	}, []ref.Ref{})
	__genPackageInFile_struct_with_dup_list_CachedRef = types.RegisterPackage(&p)
}

// StructWithDupList

type StructWithDupList struct {
	_l ListOfUint8

	ref *ref.Ref
}

func NewStructWithDupList() StructWithDupList {
	return StructWithDupList{
		_l: NewListOfUint8(),

		ref: &ref.Ref{},
	}
}

type StructWithDupListDef struct {
	L ListOfUint8Def
}

func (def StructWithDupListDef) New() StructWithDupList {
	return StructWithDupList{
		_l:  def.L.New(),
		ref: &ref.Ref{},
	}
}

func (s StructWithDupList) Def() (d StructWithDupListDef) {
	d.L = s._l.Def()
	return
}

var __typeForStructWithDupList types.Type

func (m StructWithDupList) Type() types.Type {
	return __typeForStructWithDupList
}

func init() {
	__typeForStructWithDupList = types.MakeType(__genPackageInFile_struct_with_dup_list_CachedRef, 0)
	types.RegisterStruct(__typeForStructWithDupList, builderForStructWithDupList, readerForStructWithDupList)
}

func builderForStructWithDupList(values []types.Value) types.Value {
	i := 0
	s := StructWithDupList{ref: &ref.Ref{}}
	s._l = values[i].(ListOfUint8)
	i++
	return s
}

func readerForStructWithDupList(v types.Value) []types.Value {
	values := []types.Value{}
	s := v.(StructWithDupList)
	values = append(values, s._l)
	return values
}

func (s StructWithDupList) Equals(other types.Value) bool {
	return other != nil && __typeForStructWithDupList.Equals(other.Type()) && s.Ref() == other.Ref()
}

func (s StructWithDupList) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s StructWithDupList) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, __typeForStructWithDupList.Chunks()...)
	chunks = append(chunks, s._l.Chunks()...)
	return
}

func (s StructWithDupList) ChildValues() (ret []types.Value) {
	ret = append(ret, s._l)
	return
}

func (s StructWithDupList) L() ListOfUint8 {
	return s._l
}

func (s StructWithDupList) SetL(val ListOfUint8) StructWithDupList {
	s._l = val
	s.ref = &ref.Ref{}
	return s
}
