// This file was generated by nomdl/codegen.
// @flow
/* eslint-disable */

import {
  Field as _Field,
  Kind as _Kind,
  Package as _Package,
  blobType as _blobType,
  createStructClass as _createStructClass,
  makeCompoundType as _makeCompoundType,
  makeListType as _makeListType,
  makeStructType as _makeStructType,
  makeType as _makeType,
  newList as _newList,
  registerPackage as _registerPackage,
} from '@attic/noms';
import type {
  Blob as _Blob,
  NomsList as _NomsList,
  Struct as _Struct,
} from '@attic/noms';

const _pkg = new _Package([
  _makeStructType('A',
    [
      new _Field('A', _makeCompoundType(_Kind.List, _makeCompoundType(_Kind.List, _blobType)), false),
    ],
    [

    ]
  ),
], [
]);
_registerPackage(_pkg);
const A$type = _makeType(_pkg.ref, 0);
const A$typeDef = _makeStructType('A',
  [
    new _Field('A', _makeCompoundType(_Kind.List, _makeCompoundType(_Kind.List, _blobType)), false),
  ],
  [

  ]
);


type A$Data = {
  A: _NomsList<_NomsList<_Blob>>;
};

interface A$Interface extends _Struct {
  constructor(data: A$Data): void;
  A: _NomsList<_NomsList<_Blob>>;  // readonly
  setA(value: _NomsList<_NomsList<_Blob>>): A$Interface;
}

export const A: Class<A$Interface> = _createStructClass(A$type, A$typeDef);

export function newListOfListOfBlob(values: Array<_NomsList<_Blob>>): Promise<_NomsList<_NomsList<_Blob>>> {
  return _newList(values, _makeListType(_makeCompoundType(_Kind.List, _blobType)));
}

export function newListOfBlob(values: Array<_Blob>): Promise<_NomsList<_Blob>> {
  return _newList(values, _makeListType(_blobType));
}
