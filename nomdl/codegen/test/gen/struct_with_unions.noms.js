// This file was generated by nomdl/codegen.
// @flow
/* eslint-disable */

import {
  Field as _Field,
  Package as _Package,
  createStructClass as _createStructClass,
  emptyRef as _emptyRef,
  makeStructType as _makeStructType,
  makeType as _makeType,
  numberType as _numberType,
  registerPackage as _registerPackage,
  stringType as _stringType,
} from '@attic/noms';
import type {
  Struct as _Struct,
  number as _number,
} from '@attic/noms';

const _pkg = new _Package([
  _makeStructType('StructWithUnions',
    [
      new _Field('a', _makeType(_emptyRef, 1), false),
      new _Field('d', _makeType(_emptyRef, 2), false),
    ],
    [

    ]
  ),
  _makeStructType('',
    [

    ],
    [
      new _Field('b', _numberType, false),
      new _Field('c', _stringType, false),
    ]
  ),
  _makeStructType('',
    [

    ],
    [
      new _Field('e', _numberType, false),
      new _Field('f', _stringType, false),
    ]
  ),
], [
]);
_registerPackage(_pkg);
const StructWithUnions$type = _makeType(_pkg.ref, 0);
const StructWithUnions$typeDef = _pkg.types[0];
const __unionOfBOfNumberAndCOfString$type = _makeType(_pkg.ref, 1);
const __unionOfBOfNumberAndCOfString$typeDef = _pkg.types[1];
const __unionOfEOfNumberAndFOfString$type = _makeType(_pkg.ref, 2);
const __unionOfEOfNumberAndFOfString$typeDef = _pkg.types[2];


type StructWithUnions$Data = {
  a: __unionOfBOfNumberAndCOfString;
  d: __unionOfEOfNumberAndFOfString;
};

interface StructWithUnions$Interface extends _Struct {
  constructor(data: StructWithUnions$Data): void;
  a: __unionOfBOfNumberAndCOfString;  // readonly
  setA(value: __unionOfBOfNumberAndCOfString): StructWithUnions$Interface;
  d: __unionOfEOfNumberAndFOfString;  // readonly
  setD(value: __unionOfEOfNumberAndFOfString): StructWithUnions$Interface;
}

export const StructWithUnions: Class<StructWithUnions$Interface> = _createStructClass(StructWithUnions$type, StructWithUnions$typeDef);

type __unionOfBOfNumberAndCOfString$Data = {
};

interface __unionOfBOfNumberAndCOfString$Interface extends _Struct {
  constructor(data: __unionOfBOfNumberAndCOfString$Data): void;
  b: ?_number;  // readonly
  setB(value: _number): __unionOfBOfNumberAndCOfString$Interface;
  c: ?string;  // readonly
  setC(value: string): __unionOfBOfNumberAndCOfString$Interface;
}

export const __unionOfBOfNumberAndCOfString: Class<__unionOfBOfNumberAndCOfString$Interface> = _createStructClass(__unionOfBOfNumberAndCOfString$type, __unionOfBOfNumberAndCOfString$typeDef);

type __unionOfEOfNumberAndFOfString$Data = {
};

interface __unionOfEOfNumberAndFOfString$Interface extends _Struct {
  constructor(data: __unionOfEOfNumberAndFOfString$Data): void;
  e: ?_number;  // readonly
  setE(value: _number): __unionOfEOfNumberAndFOfString$Interface;
  f: ?string;  // readonly
  setF(value: string): __unionOfEOfNumberAndFOfString$Interface;
}

export const __unionOfEOfNumberAndFOfString: Class<__unionOfEOfNumberAndFOfString$Interface> = _createStructClass(__unionOfEOfNumberAndFOfString$type, __unionOfEOfNumberAndFOfString$typeDef);
