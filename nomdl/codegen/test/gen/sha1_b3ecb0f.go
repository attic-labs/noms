// This file was generated by nomdl/codegen.

package gen

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]types.Type{
		types.MakeStructType("A",
			[]types.Field{
				types.Field{"A", types.MakeCompoundType(types.ListKind, types.MakeCompoundType(types.ListKind, types.MakePrimitiveType(types.BlobKind))), false},
			},
			types.Choices{},
		),
	}, []ref.Ref{})
	types.RegisterPackage(&p)
}

// A

type A struct {
	_A ListOfListOfBlob

	ref *ref.Ref
}

func NewA() A {
	return A{
		_A: NewListOfListOfBlob(),

		ref: &ref.Ref{},
	}
}

type ADef struct {
	A ListOfListOfBlobDef
}

func (def ADef) New() A {
	return A{
		_A:  def.A.New(),
		ref: &ref.Ref{},
	}
}

func (s A) Def() (d ADef) {
	d.A = s._A.Def()
	return
}

var __typeForA types.Type

func (m A) Type() types.Type {
	return __typeForA
}

func init() {
	__typeForA = types.MakeType(ref.Parse("sha1-b3ecb0ff6c8fbc1aca2ba3ea6e6655b8a217a399"), 0)
	types.RegisterStruct(__typeForA, builderForA, readerForA)
}

func builderForA(values []types.Value) types.Value {
	i := 0
	s := A{ref: &ref.Ref{}}
	s._A = values[i].(ListOfListOfBlob)
	i++
	return s
}

func readerForA(v types.Value) []types.Value {
	values := []types.Value{}
	s := v.(A)
	values = append(values, s._A)
	return values
}

func (s A) Equals(other types.Value) bool {
	return other != nil && __typeForA.Equals(other.Type()) && s.Ref() == other.Ref()
}

func (s A) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s A) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, __typeForA.Chunks()...)
	chunks = append(chunks, s._A.Chunks()...)
	return
}

func (s A) ChildValues() (ret []types.Value) {
	ret = append(ret, s._A)
	return
}

func (s A) A() ListOfListOfBlob {
	return s._A
}

func (s A) SetA(val ListOfListOfBlob) A {
	s._A = val
	s.ref = &ref.Ref{}
	return s
}

// ListOfListOfBlob

type ListOfListOfBlob struct {
	l   types.List
	ref *ref.Ref
}

func NewListOfListOfBlob() ListOfListOfBlob {
	return ListOfListOfBlob{types.NewTypedList(__typeForListOfListOfBlob), &ref.Ref{}}
}

type ListOfListOfBlobDef []ListOfBlobDef

func (def ListOfListOfBlobDef) New() ListOfListOfBlob {
	l := make([]types.Value, len(def))
	for i, d := range def {
		l[i] = d.New()
	}
	return ListOfListOfBlob{types.NewTypedList(__typeForListOfListOfBlob, l...), &ref.Ref{}}
}

func (l ListOfListOfBlob) Def() ListOfListOfBlobDef {
	d := make([]ListOfBlobDef, l.Len())
	for i := uint64(0); i < l.Len(); i++ {
		d[i] = l.l.Get(i).(ListOfBlob).Def()
	}
	return d
}

func (l ListOfListOfBlob) Equals(other types.Value) bool {
	return other != nil && __typeForListOfListOfBlob.Equals(other.Type()) && l.Ref() == other.Ref()
}

func (l ListOfListOfBlob) Ref() ref.Ref {
	return types.EnsureRef(l.ref, l)
}

func (l ListOfListOfBlob) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, l.Type().Chunks()...)
	chunks = append(chunks, l.l.Chunks()...)
	return
}

func (l ListOfListOfBlob) ChildValues() []types.Value {
	return append([]types.Value{}, l.l.ChildValues()...)
}

// A Noms Value that describes ListOfListOfBlob.
var __typeForListOfListOfBlob types.Type

func (m ListOfListOfBlob) Type() types.Type {
	return __typeForListOfListOfBlob
}

func init() {
	__typeForListOfListOfBlob = types.MakeCompoundType(types.ListKind, types.MakeCompoundType(types.ListKind, types.MakePrimitiveType(types.BlobKind)))
	types.RegisterValue(__typeForListOfListOfBlob, builderForListOfListOfBlob, readerForListOfListOfBlob)
}

func builderForListOfListOfBlob(v types.Value) types.Value {
	return ListOfListOfBlob{v.(types.List), &ref.Ref{}}
}

func readerForListOfListOfBlob(v types.Value) types.Value {
	return v.(ListOfListOfBlob).l
}

func (l ListOfListOfBlob) Len() uint64 {
	return l.l.Len()
}

func (l ListOfListOfBlob) Empty() bool {
	return l.Len() == uint64(0)
}

func (l ListOfListOfBlob) Get(i uint64) ListOfBlob {
	return l.l.Get(i).(ListOfBlob)
}

func (l ListOfListOfBlob) Slice(idx uint64, end uint64) ListOfListOfBlob {
	return ListOfListOfBlob{l.l.Slice(idx, end), &ref.Ref{}}
}

func (l ListOfListOfBlob) Set(i uint64, val ListOfBlob) ListOfListOfBlob {
	return ListOfListOfBlob{l.l.Set(i, val), &ref.Ref{}}
}

func (l ListOfListOfBlob) Append(v ...ListOfBlob) ListOfListOfBlob {
	return ListOfListOfBlob{l.l.Append(l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfListOfBlob) Insert(idx uint64, v ...ListOfBlob) ListOfListOfBlob {
	return ListOfListOfBlob{l.l.Insert(idx, l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfListOfBlob) Remove(idx uint64, end uint64) ListOfListOfBlob {
	return ListOfListOfBlob{l.l.Remove(idx, end), &ref.Ref{}}
}

func (l ListOfListOfBlob) RemoveAt(idx uint64) ListOfListOfBlob {
	return ListOfListOfBlob{(l.l.RemoveAt(idx)), &ref.Ref{}}
}

func (l ListOfListOfBlob) fromElemSlice(p []ListOfBlob) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v
	}
	return r
}

type ListOfListOfBlobIterCallback func(v ListOfBlob, i uint64) (stop bool)

func (l ListOfListOfBlob) Iter(cb ListOfListOfBlobIterCallback) {
	l.l.Iter(func(v types.Value, i uint64) bool {
		return cb(v.(ListOfBlob), i)
	})
}

type ListOfListOfBlobIterAllCallback func(v ListOfBlob, i uint64)

func (l ListOfListOfBlob) IterAll(cb ListOfListOfBlobIterAllCallback) {
	l.l.IterAll(func(v types.Value, i uint64) {
		cb(v.(ListOfBlob), i)
	})
}

func (l ListOfListOfBlob) IterAllP(concurrency int, cb ListOfListOfBlobIterAllCallback) {
	l.l.IterAllP(concurrency, func(v types.Value, i uint64) {
		cb(v.(ListOfBlob), i)
	})
}

type ListOfListOfBlobFilterCallback func(v ListOfBlob, i uint64) (keep bool)

func (l ListOfListOfBlob) Filter(cb ListOfListOfBlobFilterCallback) ListOfListOfBlob {
	out := l.l.Filter(func(v types.Value, i uint64) bool {
		return cb(v.(ListOfBlob), i)
	})
	return ListOfListOfBlob{out, &ref.Ref{}}
}

// ListOfBlob

type ListOfBlob struct {
	l   types.List
	ref *ref.Ref
}

func NewListOfBlob() ListOfBlob {
	return ListOfBlob{types.NewTypedList(__typeForListOfBlob), &ref.Ref{}}
}

type ListOfBlobDef []types.Blob

func (def ListOfBlobDef) New() ListOfBlob {
	l := make([]types.Value, len(def))
	for i, d := range def {
		l[i] = d
	}
	return ListOfBlob{types.NewTypedList(__typeForListOfBlob, l...), &ref.Ref{}}
}

func (l ListOfBlob) Def() ListOfBlobDef {
	d := make([]types.Blob, l.Len())
	for i := uint64(0); i < l.Len(); i++ {
		d[i] = l.l.Get(i).(types.Blob)
	}
	return d
}

func (l ListOfBlob) Equals(other types.Value) bool {
	return other != nil && __typeForListOfBlob.Equals(other.Type()) && l.Ref() == other.Ref()
}

func (l ListOfBlob) Ref() ref.Ref {
	return types.EnsureRef(l.ref, l)
}

func (l ListOfBlob) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, l.Type().Chunks()...)
	chunks = append(chunks, l.l.Chunks()...)
	return
}

func (l ListOfBlob) ChildValues() []types.Value {
	return append([]types.Value{}, l.l.ChildValues()...)
}

// A Noms Value that describes ListOfBlob.
var __typeForListOfBlob types.Type

func (m ListOfBlob) Type() types.Type {
	return __typeForListOfBlob
}

func init() {
	__typeForListOfBlob = types.MakeCompoundType(types.ListKind, types.MakePrimitiveType(types.BlobKind))
	types.RegisterValue(__typeForListOfBlob, builderForListOfBlob, readerForListOfBlob)
}

func builderForListOfBlob(v types.Value) types.Value {
	return ListOfBlob{v.(types.List), &ref.Ref{}}
}

func readerForListOfBlob(v types.Value) types.Value {
	return v.(ListOfBlob).l
}

func (l ListOfBlob) Len() uint64 {
	return l.l.Len()
}

func (l ListOfBlob) Empty() bool {
	return l.Len() == uint64(0)
}

func (l ListOfBlob) Get(i uint64) types.Blob {
	return l.l.Get(i).(types.Blob)
}

func (l ListOfBlob) Slice(idx uint64, end uint64) ListOfBlob {
	return ListOfBlob{l.l.Slice(idx, end), &ref.Ref{}}
}

func (l ListOfBlob) Set(i uint64, val types.Blob) ListOfBlob {
	return ListOfBlob{l.l.Set(i, val), &ref.Ref{}}
}

func (l ListOfBlob) Append(v ...types.Blob) ListOfBlob {
	return ListOfBlob{l.l.Append(l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfBlob) Insert(idx uint64, v ...types.Blob) ListOfBlob {
	return ListOfBlob{l.l.Insert(idx, l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfBlob) Remove(idx uint64, end uint64) ListOfBlob {
	return ListOfBlob{l.l.Remove(idx, end), &ref.Ref{}}
}

func (l ListOfBlob) RemoveAt(idx uint64) ListOfBlob {
	return ListOfBlob{(l.l.RemoveAt(idx)), &ref.Ref{}}
}

func (l ListOfBlob) fromElemSlice(p []types.Blob) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v
	}
	return r
}

type ListOfBlobIterCallback func(v types.Blob, i uint64) (stop bool)

func (l ListOfBlob) Iter(cb ListOfBlobIterCallback) {
	l.l.Iter(func(v types.Value, i uint64) bool {
		return cb(v.(types.Blob), i)
	})
}

type ListOfBlobIterAllCallback func(v types.Blob, i uint64)

func (l ListOfBlob) IterAll(cb ListOfBlobIterAllCallback) {
	l.l.IterAll(func(v types.Value, i uint64) {
		cb(v.(types.Blob), i)
	})
}

func (l ListOfBlob) IterAllP(concurrency int, cb ListOfBlobIterAllCallback) {
	l.l.IterAllP(concurrency, func(v types.Value, i uint64) {
		cb(v.(types.Blob), i)
	})
}

type ListOfBlobFilterCallback func(v types.Blob, i uint64) (keep bool)

func (l ListOfBlob) Filter(cb ListOfBlobFilterCallback) ListOfBlob {
	out := l.l.Filter(func(v types.Value, i uint64) bool {
		return cb(v.(types.Blob), i)
	})
	return ListOfBlob{out, &ref.Ref{}}
}
