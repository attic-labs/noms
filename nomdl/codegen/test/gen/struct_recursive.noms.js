// This file was generated by nomdl/codegen.
// @flow
/* eslint-disable */

import {
  Field as _Field,
  Kind as _Kind,
  Package as _Package,
  createStructClass as _createStructClass,
  emptyRef as _emptyRef,
  makeCompoundType as _makeCompoundType,
  makeListType as _makeListType,
  makeStructType as _makeStructType,
  makeType as _makeType,
  newList as _newList,
  registerPackage as _registerPackage,
} from '@attic/noms';
import type {
  NomsList as _NomsList,
  Struct as _Struct,
} from '@attic/noms';

const _pkg = new _Package([
  _makeStructType('Tree',
    [
      new _Field('children', _makeCompoundType(_Kind.List, _makeType(_emptyRef, 0)), false),
    ],
    [

    ]
  ),
], [
]);
_registerPackage(_pkg);
const Tree$type = _makeType(_pkg.ref, 0);
const Tree$typeDef = _pkg.types[0];


type Tree$Data = {
  children: _NomsList<Tree>;
};

interface Tree$Interface extends _Struct {
  constructor(data: Tree$Data): void;
  children: _NomsList<Tree>;  // readonly
  setChildren(value: _NomsList<Tree>): Tree$Interface;
}

export const Tree: Class<Tree$Interface> = _createStructClass(Tree$type, Tree$typeDef);

export function newListOfTree(values: Array<Tree>): Promise<_NomsList<Tree>> {
  return _newList(values, _makeListType(_makeType(_pkg.ref, 0)));
}
