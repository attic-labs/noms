// This file was generated by nomdl/codegen.
// @flow
/* eslint-disable */

import {
  Field as _Field,
  Kind as _Kind,
  Package as _Package,
  blobType as _blobType,
  createStructClass as _createStructClass,
  makeCompoundType as _makeCompoundType,
  makeSetType as _makeSetType,
  makeStructType as _makeStructType,
  makeType as _makeType,
  newSet as _newSet,
  numberType as _numberType,
  registerPackage as _registerPackage,
  stringType as _stringType,
  valueType as _valueType,
} from '@attic/noms';
import type {
  Blob as _Blob,
  NomsSet as _NomsSet,
  Struct as _Struct,
  Value as _Value,
  number as _number,
} from '@attic/noms';

const _pkg = new _Package([
  _makeStructType('StructWithUnionField',
    [
      new _Field('a', _numberType, false),
    ],
    [
      new _Field('b', _numberType, false),
      new _Field('c', _stringType, false),
      new _Field('d', _blobType, false),
      new _Field('e', _valueType, false),
      new _Field('f', _makeCompoundType(_Kind.Set, _numberType), false),
    ]
  ),
], [
]);
_registerPackage(_pkg);
const StructWithUnionField$type = _makeType(_pkg.ref, 0);
const StructWithUnionField$typeDef = _pkg.types[0];


type StructWithUnionField$Data = {
  a: _number;
};

interface StructWithUnionField$Interface extends _Struct {
  constructor(data: StructWithUnionField$Data): void;
  a: _number;  // readonly
  setA(value: _number): StructWithUnionField$Interface;
  b: ?_number;  // readonly
  setB(value: _number): StructWithUnionField$Interface;
  c: ?string;  // readonly
  setC(value: string): StructWithUnionField$Interface;
  d: ?_Blob;  // readonly
  setD(value: _Blob): StructWithUnionField$Interface;
  e: ?_Value;  // readonly
  setE(value: _Value): StructWithUnionField$Interface;
  f: ?_NomsSet<_number>;  // readonly
  setF(value: _NomsSet<_number>): StructWithUnionField$Interface;
}

export const StructWithUnionField: Class<StructWithUnionField$Interface> = _createStructClass(StructWithUnionField$type, StructWithUnionField$typeDef);

export function newSetOfNumber(values: Array<_number>): Promise<_NomsSet<_number>> {
  return _newSet(values, _makeSetType(_numberType));
}
