// This file was generated by nomdl/codegen.

package gen

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]types.Type{
		types.MakeStructType("Struct",
			[]types.Field{
				types.Field{"s", types.MakePrimitiveType(types.StringKind), false},
				types.Field{"b", types.MakePrimitiveType(types.BoolKind), false},
			},
			types.Choices{},
		),
	}, []ref.Ref{})
	types.RegisterPackage(&p)
}

// Struct

type Struct struct {
	_s string
	_b bool

	ref *ref.Ref
}

func NewStruct() Struct {
	return Struct{
		_s: "",
		_b: false,

		ref: &ref.Ref{},
	}
}

type StructDef struct {
	S string
	B bool
}

func (def StructDef) New() Struct {
	return Struct{
		_s:  def.S,
		_b:  def.B,
		ref: &ref.Ref{},
	}
}

func (s Struct) Def() (d StructDef) {
	d.S = s._s
	d.B = s._b
	return
}

var __typeForStruct types.Type

func (m Struct) Type() types.Type {
	return __typeForStruct
}

func init() {
	__typeForStruct = types.MakeType(ref.Parse("sha1-a1c1ec1fc3e4af6d49f5f53da41d9cc2bf1dc804"), 0)
	types.RegisterStruct(__typeForStruct, builderForStruct, readerForStruct)
}

func builderForStruct(values []types.Value) types.Value {
	i := 0
	s := Struct{ref: &ref.Ref{}}
	s._s = values[i].(types.String).String()
	i++
	s._b = bool(values[i].(types.Bool))
	i++
	return s
}

func readerForStruct(v types.Value) []types.Value {
	values := []types.Value{}
	s := v.(Struct)
	values = append(values, types.NewString(s._s))
	values = append(values, types.Bool(s._b))
	return values
}

func (s Struct) Equals(other types.Value) bool {
	return other != nil && __typeForStruct.Equals(other.Type()) && s.Ref() == other.Ref()
}

func (s Struct) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s Struct) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, __typeForStruct.Chunks()...)
	return
}

func (s Struct) ChildValues() (ret []types.Value) {
	ret = append(ret, types.NewString(s._s))
	ret = append(ret, types.Bool(s._b))
	return
}

func (s Struct) S() string {
	return s._s
}

func (s Struct) SetS(val string) Struct {
	s._s = val
	s.ref = &ref.Ref{}
	return s
}

func (s Struct) B() bool {
	return s._b
}

func (s Struct) SetB(val bool) Struct {
	s._b = val
	s.ref = &ref.Ref{}
	return s
}

// ListOfStruct

type ListOfStruct struct {
	l   types.List
	ref *ref.Ref
}

func NewListOfStruct() ListOfStruct {
	return ListOfStruct{types.NewTypedList(__typeForListOfStruct), &ref.Ref{}}
}

type ListOfStructDef []StructDef

func (def ListOfStructDef) New() ListOfStruct {
	l := make([]types.Value, len(def))
	for i, d := range def {
		l[i] = d.New()
	}
	return ListOfStruct{types.NewTypedList(__typeForListOfStruct, l...), &ref.Ref{}}
}

func (l ListOfStruct) Def() ListOfStructDef {
	d := make([]StructDef, l.Len())
	for i := uint64(0); i < l.Len(); i++ {
		d[i] = l.l.Get(i).(Struct).Def()
	}
	return d
}

func (l ListOfStruct) Equals(other types.Value) bool {
	return other != nil && __typeForListOfStruct.Equals(other.Type()) && l.Ref() == other.Ref()
}

func (l ListOfStruct) Ref() ref.Ref {
	return types.EnsureRef(l.ref, l)
}

func (l ListOfStruct) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, l.Type().Chunks()...)
	chunks = append(chunks, l.l.Chunks()...)
	return
}

func (l ListOfStruct) ChildValues() []types.Value {
	return append([]types.Value{}, l.l.ChildValues()...)
}

// A Noms Value that describes ListOfStruct.
var __typeForListOfStruct types.Type

func (m ListOfStruct) Type() types.Type {
	return __typeForListOfStruct
}

func init() {
	__typeForListOfStruct = types.MakeCompoundType(types.ListKind, types.MakeType(ref.Parse("sha1-a1c1ec1fc3e4af6d49f5f53da41d9cc2bf1dc804"), 0))
	types.RegisterValue(__typeForListOfStruct, builderForListOfStruct, readerForListOfStruct)
}

func builderForListOfStruct(v types.Value) types.Value {
	return ListOfStruct{v.(types.List), &ref.Ref{}}
}

func readerForListOfStruct(v types.Value) types.Value {
	return v.(ListOfStruct).l
}

func (l ListOfStruct) Len() uint64 {
	return l.l.Len()
}

func (l ListOfStruct) Empty() bool {
	return l.Len() == uint64(0)
}

func (l ListOfStruct) Get(i uint64) Struct {
	return l.l.Get(i).(Struct)
}

func (l ListOfStruct) Slice(idx uint64, end uint64) ListOfStruct {
	return ListOfStruct{l.l.Slice(idx, end), &ref.Ref{}}
}

func (l ListOfStruct) Set(i uint64, val Struct) ListOfStruct {
	return ListOfStruct{l.l.Set(i, val), &ref.Ref{}}
}

func (l ListOfStruct) Append(v ...Struct) ListOfStruct {
	return ListOfStruct{l.l.Append(l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfStruct) Insert(idx uint64, v ...Struct) ListOfStruct {
	return ListOfStruct{l.l.Insert(idx, l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfStruct) Remove(idx uint64, end uint64) ListOfStruct {
	return ListOfStruct{l.l.Remove(idx, end), &ref.Ref{}}
}

func (l ListOfStruct) RemoveAt(idx uint64) ListOfStruct {
	return ListOfStruct{(l.l.RemoveAt(idx)), &ref.Ref{}}
}

func (l ListOfStruct) fromElemSlice(p []Struct) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v
	}
	return r
}

type ListOfStructIterCallback func(v Struct, i uint64) (stop bool)

func (l ListOfStruct) Iter(cb ListOfStructIterCallback) {
	l.l.Iter(func(v types.Value, i uint64) bool {
		return cb(v.(Struct), i)
	})
}

type ListOfStructIterAllCallback func(v Struct, i uint64)

func (l ListOfStruct) IterAll(cb ListOfStructIterAllCallback) {
	l.l.IterAll(func(v types.Value, i uint64) {
		cb(v.(Struct), i)
	})
}

func (l ListOfStruct) IterAllP(concurrency int, cb ListOfStructIterAllCallback) {
	l.l.IterAllP(concurrency, func(v types.Value, i uint64) {
		cb(v.(Struct), i)
	})
}

type ListOfStructFilterCallback func(v Struct, i uint64) (keep bool)

func (l ListOfStruct) Filter(cb ListOfStructFilterCallback) ListOfStruct {
	out := l.l.Filter(func(v types.Value, i uint64) bool {
		return cb(v.(Struct), i)
	})
	return ListOfStruct{out, &ref.Ref{}}
}
