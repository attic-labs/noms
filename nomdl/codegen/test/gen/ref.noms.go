// This file was generated by nomdl/codegen.

package gen

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]types.Type{
		types.MakeStructType("StructWithRef",
			[]types.Field{
				types.Field{"r", types.MakeCompoundType(types.RefKind, types.MakeCompoundType(types.SetKind, types.MakePrimitiveType(types.Float32Kind))), false},
			},
			types.Choices{},
		),
	}, []ref.Ref{})
	types.RegisterPackage(&p)
}

// StructWithRef

type StructWithRef struct {
	_r RefOfSetOfFloat32

	ref *ref.Ref
}

func NewStructWithRef() StructWithRef {
	return StructWithRef{
		_r: NewRefOfSetOfFloat32(ref.Ref{}),

		ref: &ref.Ref{},
	}
}

type StructWithRefDef struct {
	R ref.Ref
}

func (def StructWithRefDef) New() StructWithRef {
	return StructWithRef{
		_r:  NewRefOfSetOfFloat32(def.R),
		ref: &ref.Ref{},
	}
}

func (s StructWithRef) Def() (d StructWithRefDef) {
	d.R = s._r.TargetRef()
	return
}

var __typeForStructWithRef types.Type

func (m StructWithRef) Type() types.Type {
	return __typeForStructWithRef
}

func init() {
	__typeForStructWithRef = types.MakeType(ref.Parse("sha1-66d9a155d47bf08a41fb19984627e7f5859f92bd"), 0)
	types.RegisterStruct(__typeForStructWithRef, builderForStructWithRef, readerForStructWithRef)
}

func builderForStructWithRef(values []types.Value) types.Value {
	i := 0
	s := StructWithRef{ref: &ref.Ref{}}
	s._r = values[i].(RefOfSetOfFloat32)
	i++
	return s
}

func readerForStructWithRef(v types.Value) []types.Value {
	values := []types.Value{}
	s := v.(StructWithRef)
	values = append(values, s._r)
	return values
}

func (s StructWithRef) Equals(other types.Value) bool {
	return other != nil && __typeForStructWithRef.Equals(other.Type()) && s.Ref() == other.Ref()
}

func (s StructWithRef) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s StructWithRef) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, __typeForStructWithRef.Chunks()...)
	chunks = append(chunks, s._r.Chunks()...)
	return
}

func (s StructWithRef) ChildValues() (ret []types.Value) {
	ret = append(ret, s._r)
	return
}

func (s StructWithRef) R() RefOfSetOfFloat32 {
	return s._r
}

func (s StructWithRef) SetR(val RefOfSetOfFloat32) StructWithRef {
	s._r = val
	s.ref = &ref.Ref{}
	return s
}

// RefOfListOfString

type RefOfListOfString struct {
	target ref.Ref
	ref    *ref.Ref
}

func NewRefOfListOfString(target ref.Ref) RefOfListOfString {
	return RefOfListOfString{target, &ref.Ref{}}
}

func (r RefOfListOfString) TargetRef() ref.Ref {
	return r.target
}

func (r RefOfListOfString) Ref() ref.Ref {
	return types.EnsureRef(r.ref, r)
}

func (r RefOfListOfString) Equals(other types.Value) bool {
	return other != nil && __typeForRefOfListOfString.Equals(other.Type()) && r.Ref() == other.Ref()
}

func (r RefOfListOfString) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, r.Type().Chunks()...)
	chunks = append(chunks, r)
	return
}

func (r RefOfListOfString) ChildValues() []types.Value {
	return nil
}

// A Noms Value that describes RefOfListOfString.
var __typeForRefOfListOfString types.Type

func (r RefOfListOfString) Type() types.Type {
	return __typeForRefOfListOfString
}

func (r RefOfListOfString) Less(other types.OrderedValue) bool {
	return r.TargetRef().Less(other.(types.RefBase).TargetRef())
}

func init() {
	__typeForRefOfListOfString = types.MakeCompoundType(types.RefKind, types.MakeCompoundType(types.ListKind, types.MakePrimitiveType(types.StringKind)))
	types.RegisterRef(__typeForRefOfListOfString, builderForRefOfListOfString)
}

func builderForRefOfListOfString(r ref.Ref) types.RefBase {
	return NewRefOfListOfString(r)
}

func (r RefOfListOfString) TargetValue(vr types.ValueReader) ListOfString {
	return vr.ReadValue(r.target).(ListOfString)
}

// ListOfRefOfFloat32

type ListOfRefOfFloat32 struct {
	l   types.List
	ref *ref.Ref
}

func NewListOfRefOfFloat32() ListOfRefOfFloat32 {
	return ListOfRefOfFloat32{types.NewTypedList(__typeForListOfRefOfFloat32), &ref.Ref{}}
}

type ListOfRefOfFloat32Def []ref.Ref

func (def ListOfRefOfFloat32Def) New() ListOfRefOfFloat32 {
	l := make([]types.Value, len(def))
	for i, d := range def {
		l[i] = NewRefOfFloat32(d)
	}
	return ListOfRefOfFloat32{types.NewTypedList(__typeForListOfRefOfFloat32, l...), &ref.Ref{}}
}

func (l ListOfRefOfFloat32) Def() ListOfRefOfFloat32Def {
	d := make([]ref.Ref, l.Len())
	for i := uint64(0); i < l.Len(); i++ {
		d[i] = l.l.Get(i).(RefOfFloat32).TargetRef()
	}
	return d
}

func (l ListOfRefOfFloat32) Equals(other types.Value) bool {
	return other != nil && __typeForListOfRefOfFloat32.Equals(other.Type()) && l.Ref() == other.Ref()
}

func (l ListOfRefOfFloat32) Ref() ref.Ref {
	return types.EnsureRef(l.ref, l)
}

func (l ListOfRefOfFloat32) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, l.Type().Chunks()...)
	chunks = append(chunks, l.l.Chunks()...)
	return
}

func (l ListOfRefOfFloat32) ChildValues() []types.Value {
	return append([]types.Value{}, l.l.ChildValues()...)
}

// A Noms Value that describes ListOfRefOfFloat32.
var __typeForListOfRefOfFloat32 types.Type

func (m ListOfRefOfFloat32) Type() types.Type {
	return __typeForListOfRefOfFloat32
}

func init() {
	__typeForListOfRefOfFloat32 = types.MakeCompoundType(types.ListKind, types.MakeCompoundType(types.RefKind, types.MakePrimitiveType(types.Float32Kind)))
	types.RegisterValue(__typeForListOfRefOfFloat32, builderForListOfRefOfFloat32, readerForListOfRefOfFloat32)
}

func builderForListOfRefOfFloat32(v types.Value) types.Value {
	return ListOfRefOfFloat32{v.(types.List), &ref.Ref{}}
}

func readerForListOfRefOfFloat32(v types.Value) types.Value {
	return v.(ListOfRefOfFloat32).l
}

func (l ListOfRefOfFloat32) Len() uint64 {
	return l.l.Len()
}

func (l ListOfRefOfFloat32) Empty() bool {
	return l.Len() == uint64(0)
}

func (l ListOfRefOfFloat32) Get(i uint64) RefOfFloat32 {
	return l.l.Get(i).(RefOfFloat32)
}

func (l ListOfRefOfFloat32) Slice(idx uint64, end uint64) ListOfRefOfFloat32 {
	return ListOfRefOfFloat32{l.l.Slice(idx, end), &ref.Ref{}}
}

func (l ListOfRefOfFloat32) Set(i uint64, val RefOfFloat32) ListOfRefOfFloat32 {
	return ListOfRefOfFloat32{l.l.Set(i, val), &ref.Ref{}}
}

func (l ListOfRefOfFloat32) Append(v ...RefOfFloat32) ListOfRefOfFloat32 {
	return ListOfRefOfFloat32{l.l.Append(l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfRefOfFloat32) Insert(idx uint64, v ...RefOfFloat32) ListOfRefOfFloat32 {
	return ListOfRefOfFloat32{l.l.Insert(idx, l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfRefOfFloat32) Remove(idx uint64, end uint64) ListOfRefOfFloat32 {
	return ListOfRefOfFloat32{l.l.Remove(idx, end), &ref.Ref{}}
}

func (l ListOfRefOfFloat32) RemoveAt(idx uint64) ListOfRefOfFloat32 {
	return ListOfRefOfFloat32{(l.l.RemoveAt(idx)), &ref.Ref{}}
}

func (l ListOfRefOfFloat32) fromElemSlice(p []RefOfFloat32) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v
	}
	return r
}

type ListOfRefOfFloat32IterCallback func(v RefOfFloat32, i uint64) (stop bool)

func (l ListOfRefOfFloat32) Iter(cb ListOfRefOfFloat32IterCallback) {
	l.l.Iter(func(v types.Value, i uint64) bool {
		return cb(v.(RefOfFloat32), i)
	})
}

type ListOfRefOfFloat32IterAllCallback func(v RefOfFloat32, i uint64)

func (l ListOfRefOfFloat32) IterAll(cb ListOfRefOfFloat32IterAllCallback) {
	l.l.IterAll(func(v types.Value, i uint64) {
		cb(v.(RefOfFloat32), i)
	})
}

func (l ListOfRefOfFloat32) IterAllP(concurrency int, cb ListOfRefOfFloat32IterAllCallback) {
	l.l.IterAllP(concurrency, func(v types.Value, i uint64) {
		cb(v.(RefOfFloat32), i)
	})
}

type ListOfRefOfFloat32FilterCallback func(v RefOfFloat32, i uint64) (keep bool)

func (l ListOfRefOfFloat32) Filter(cb ListOfRefOfFloat32FilterCallback) ListOfRefOfFloat32 {
	out := l.l.Filter(func(v types.Value, i uint64) bool {
		return cb(v.(RefOfFloat32), i)
	})
	return ListOfRefOfFloat32{out, &ref.Ref{}}
}

// RefOfSetOfFloat32

type RefOfSetOfFloat32 struct {
	target ref.Ref
	ref    *ref.Ref
}

func NewRefOfSetOfFloat32(target ref.Ref) RefOfSetOfFloat32 {
	return RefOfSetOfFloat32{target, &ref.Ref{}}
}

func (r RefOfSetOfFloat32) TargetRef() ref.Ref {
	return r.target
}

func (r RefOfSetOfFloat32) Ref() ref.Ref {
	return types.EnsureRef(r.ref, r)
}

func (r RefOfSetOfFloat32) Equals(other types.Value) bool {
	return other != nil && __typeForRefOfSetOfFloat32.Equals(other.Type()) && r.Ref() == other.Ref()
}

func (r RefOfSetOfFloat32) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, r.Type().Chunks()...)
	chunks = append(chunks, r)
	return
}

func (r RefOfSetOfFloat32) ChildValues() []types.Value {
	return nil
}

// A Noms Value that describes RefOfSetOfFloat32.
var __typeForRefOfSetOfFloat32 types.Type

func (r RefOfSetOfFloat32) Type() types.Type {
	return __typeForRefOfSetOfFloat32
}

func (r RefOfSetOfFloat32) Less(other types.OrderedValue) bool {
	return r.TargetRef().Less(other.(types.RefBase).TargetRef())
}

func init() {
	__typeForRefOfSetOfFloat32 = types.MakeCompoundType(types.RefKind, types.MakeCompoundType(types.SetKind, types.MakePrimitiveType(types.Float32Kind)))
	types.RegisterRef(__typeForRefOfSetOfFloat32, builderForRefOfSetOfFloat32)
}

func builderForRefOfSetOfFloat32(r ref.Ref) types.RefBase {
	return NewRefOfSetOfFloat32(r)
}

func (r RefOfSetOfFloat32) TargetValue(vr types.ValueReader) SetOfFloat32 {
	return vr.ReadValue(r.target).(SetOfFloat32)
}

// ListOfString

type ListOfString struct {
	l   types.List
	ref *ref.Ref
}

func NewListOfString() ListOfString {
	return ListOfString{types.NewTypedList(__typeForListOfString), &ref.Ref{}}
}

type ListOfStringDef []string

func (def ListOfStringDef) New() ListOfString {
	l := make([]types.Value, len(def))
	for i, d := range def {
		l[i] = types.NewString(d)
	}
	return ListOfString{types.NewTypedList(__typeForListOfString, l...), &ref.Ref{}}
}

func (l ListOfString) Def() ListOfStringDef {
	d := make([]string, l.Len())
	for i := uint64(0); i < l.Len(); i++ {
		d[i] = l.l.Get(i).(types.String).String()
	}
	return d
}

func (l ListOfString) Equals(other types.Value) bool {
	return other != nil && __typeForListOfString.Equals(other.Type()) && l.Ref() == other.Ref()
}

func (l ListOfString) Ref() ref.Ref {
	return types.EnsureRef(l.ref, l)
}

func (l ListOfString) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, l.Type().Chunks()...)
	chunks = append(chunks, l.l.Chunks()...)
	return
}

func (l ListOfString) ChildValues() []types.Value {
	return append([]types.Value{}, l.l.ChildValues()...)
}

// A Noms Value that describes ListOfString.
var __typeForListOfString types.Type

func (m ListOfString) Type() types.Type {
	return __typeForListOfString
}

func init() {
	__typeForListOfString = types.MakeCompoundType(types.ListKind, types.MakePrimitiveType(types.StringKind))
	types.RegisterValue(__typeForListOfString, builderForListOfString, readerForListOfString)
}

func builderForListOfString(v types.Value) types.Value {
	return ListOfString{v.(types.List), &ref.Ref{}}
}

func readerForListOfString(v types.Value) types.Value {
	return v.(ListOfString).l
}

func (l ListOfString) Len() uint64 {
	return l.l.Len()
}

func (l ListOfString) Empty() bool {
	return l.Len() == uint64(0)
}

func (l ListOfString) Get(i uint64) string {
	return l.l.Get(i).(types.String).String()
}

func (l ListOfString) Slice(idx uint64, end uint64) ListOfString {
	return ListOfString{l.l.Slice(idx, end), &ref.Ref{}}
}

func (l ListOfString) Set(i uint64, val string) ListOfString {
	return ListOfString{l.l.Set(i, types.NewString(val)), &ref.Ref{}}
}

func (l ListOfString) Append(v ...string) ListOfString {
	return ListOfString{l.l.Append(l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfString) Insert(idx uint64, v ...string) ListOfString {
	return ListOfString{l.l.Insert(idx, l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfString) Remove(idx uint64, end uint64) ListOfString {
	return ListOfString{l.l.Remove(idx, end), &ref.Ref{}}
}

func (l ListOfString) RemoveAt(idx uint64) ListOfString {
	return ListOfString{(l.l.RemoveAt(idx)), &ref.Ref{}}
}

func (l ListOfString) fromElemSlice(p []string) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = types.NewString(v)
	}
	return r
}

type ListOfStringIterCallback func(v string, i uint64) (stop bool)

func (l ListOfString) Iter(cb ListOfStringIterCallback) {
	l.l.Iter(func(v types.Value, i uint64) bool {
		return cb(v.(types.String).String(), i)
	})
}

type ListOfStringIterAllCallback func(v string, i uint64)

func (l ListOfString) IterAll(cb ListOfStringIterAllCallback) {
	l.l.IterAll(func(v types.Value, i uint64) {
		cb(v.(types.String).String(), i)
	})
}

func (l ListOfString) IterAllP(concurrency int, cb ListOfStringIterAllCallback) {
	l.l.IterAllP(concurrency, func(v types.Value, i uint64) {
		cb(v.(types.String).String(), i)
	})
}

type ListOfStringFilterCallback func(v string, i uint64) (keep bool)

func (l ListOfString) Filter(cb ListOfStringFilterCallback) ListOfString {
	out := l.l.Filter(func(v types.Value, i uint64) bool {
		return cb(v.(types.String).String(), i)
	})
	return ListOfString{out, &ref.Ref{}}
}

// RefOfFloat32

type RefOfFloat32 struct {
	target ref.Ref
	ref    *ref.Ref
}

func NewRefOfFloat32(target ref.Ref) RefOfFloat32 {
	return RefOfFloat32{target, &ref.Ref{}}
}

func (r RefOfFloat32) TargetRef() ref.Ref {
	return r.target
}

func (r RefOfFloat32) Ref() ref.Ref {
	return types.EnsureRef(r.ref, r)
}

func (r RefOfFloat32) Equals(other types.Value) bool {
	return other != nil && __typeForRefOfFloat32.Equals(other.Type()) && r.Ref() == other.Ref()
}

func (r RefOfFloat32) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, r.Type().Chunks()...)
	chunks = append(chunks, r)
	return
}

func (r RefOfFloat32) ChildValues() []types.Value {
	return nil
}

// A Noms Value that describes RefOfFloat32.
var __typeForRefOfFloat32 types.Type

func (r RefOfFloat32) Type() types.Type {
	return __typeForRefOfFloat32
}

func (r RefOfFloat32) Less(other types.OrderedValue) bool {
	return r.TargetRef().Less(other.(types.RefBase).TargetRef())
}

func init() {
	__typeForRefOfFloat32 = types.MakeCompoundType(types.RefKind, types.MakePrimitiveType(types.Float32Kind))
	types.RegisterRef(__typeForRefOfFloat32, builderForRefOfFloat32)
}

func builderForRefOfFloat32(r ref.Ref) types.RefBase {
	return NewRefOfFloat32(r)
}

func (r RefOfFloat32) TargetValue(vr types.ValueReader) float32 {
	return float32(vr.ReadValue(r.target).(types.Float32))
}

// SetOfFloat32

type SetOfFloat32 struct {
	s   types.Set
	ref *ref.Ref
}

func NewSetOfFloat32() SetOfFloat32 {
	return SetOfFloat32{types.NewTypedSet(__typeForSetOfFloat32), &ref.Ref{}}
}

type SetOfFloat32Def map[float32]bool

func (def SetOfFloat32Def) New() SetOfFloat32 {
	l := make([]types.Value, len(def))
	i := 0
	for d, _ := range def {
		l[i] = types.Float32(d)
		i++
	}
	return SetOfFloat32{types.NewTypedSet(__typeForSetOfFloat32, l...), &ref.Ref{}}
}

func (s SetOfFloat32) Def() SetOfFloat32Def {
	def := make(map[float32]bool, s.Len())
	s.s.Iter(func(v types.Value) bool {
		def[float32(v.(types.Float32))] = true
		return false
	})
	return def
}

func (s SetOfFloat32) Equals(other types.Value) bool {
	return other != nil && __typeForSetOfFloat32.Equals(other.Type()) && s.Ref() == other.Ref()
}

func (s SetOfFloat32) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s SetOfFloat32) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, s.Type().Chunks()...)
	chunks = append(chunks, s.s.Chunks()...)
	return
}

func (s SetOfFloat32) ChildValues() []types.Value {
	return append([]types.Value{}, s.s.ChildValues()...)
}

// A Noms Value that describes SetOfFloat32.
var __typeForSetOfFloat32 types.Type

func (m SetOfFloat32) Type() types.Type {
	return __typeForSetOfFloat32
}

func init() {
	__typeForSetOfFloat32 = types.MakeCompoundType(types.SetKind, types.MakePrimitiveType(types.Float32Kind))
	types.RegisterValue(__typeForSetOfFloat32, builderForSetOfFloat32, readerForSetOfFloat32)
}

func builderForSetOfFloat32(v types.Value) types.Value {
	return SetOfFloat32{v.(types.Set), &ref.Ref{}}
}

func readerForSetOfFloat32(v types.Value) types.Value {
	return v.(SetOfFloat32).s
}

func (s SetOfFloat32) Empty() bool {
	return s.s.Empty()
}

func (s SetOfFloat32) Len() uint64 {
	return s.s.Len()
}

func (s SetOfFloat32) Has(p float32) bool {
	return s.s.Has(types.Float32(p))
}

type SetOfFloat32IterCallback func(p float32) (stop bool)

func (s SetOfFloat32) Iter(cb SetOfFloat32IterCallback) {
	s.s.Iter(func(v types.Value) bool {
		return cb(float32(v.(types.Float32)))
	})
}

type SetOfFloat32IterAllCallback func(p float32)

func (s SetOfFloat32) IterAll(cb SetOfFloat32IterAllCallback) {
	s.s.IterAll(func(v types.Value) {
		cb(float32(v.(types.Float32)))
	})
}

func (s SetOfFloat32) IterAllP(concurrency int, cb SetOfFloat32IterAllCallback) {
	s.s.IterAllP(concurrency, func(v types.Value) {
		cb(float32(v.(types.Float32)))
	})
}

type SetOfFloat32FilterCallback func(p float32) (keep bool)

func (s SetOfFloat32) Filter(cb SetOfFloat32FilterCallback) SetOfFloat32 {
	out := s.s.Filter(func(v types.Value) bool {
		return cb(float32(v.(types.Float32)))
	})
	return SetOfFloat32{out, &ref.Ref{}}
}

func (s SetOfFloat32) Insert(p ...float32) SetOfFloat32 {
	return SetOfFloat32{s.s.Insert(s.fromElemSlice(p)...), &ref.Ref{}}
}

func (s SetOfFloat32) Remove(p ...float32) SetOfFloat32 {
	return SetOfFloat32{s.s.Remove(s.fromElemSlice(p)...), &ref.Ref{}}
}

func (s SetOfFloat32) Union(others ...SetOfFloat32) SetOfFloat32 {
	return SetOfFloat32{s.s.Union(s.fromStructSlice(others)...), &ref.Ref{}}
}

func (s SetOfFloat32) First() float32 {
	return float32(s.s.First().(types.Float32))
}

func (s SetOfFloat32) fromStructSlice(p []SetOfFloat32) []types.Set {
	r := make([]types.Set, len(p))
	for i, v := range p {
		r[i] = v.s
	}
	return r
}

func (s SetOfFloat32) fromElemSlice(p []float32) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = types.Float32(v)
	}
	return r
}
