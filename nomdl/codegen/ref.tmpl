{{$typesPackage := .TypesPackage}}

// {{.Name}}

type {{.Name}} struct {
	target ref.Ref
	ref    *ref.Ref
}

func New{{.Name}}(target ref.Ref) {{.Name}} {
	return {{.Name}}{target, &ref.Ref{}}
}

func (r {{.Name}}) TargetRef() ref.Ref {
	return r.target
}

func (r {{.Name}}) Ref() ref.Ref {
	return {{$typesPackage}}EnsureRef(r.ref, r)
}

func (r {{.Name}}) Equals(other {{$typesPackage}}Value) bool {
	return other != nil && r.Ref() == other.Ref()
}

func (r {{.Name}}) Chunks() []ref.Ref {
	return r.TypeRef().Chunks()
}

func {{.Name}}FromVal(val {{$typesPackage}}Value) {{.Name}} {
	// TODO: Do we still need FromVal?
	if val, ok := val.({{.Name}}); ok {
		return val
	}
	return New{{.Name}}(val.({{$typesPackage}}Ref).TargetRef())
}

{{template "type_ref.tmpl" .}}

func (r {{.Name}}) TargetValue(cs chunks.ChunkSource) {{userType .ElemType}} {
	return {{valueToUser (printf "%sReadValue(r.target, cs)" $typesPackage) .ElemType}}
}

func (r {{.Name}}) SetTargetValue(val {{userType .ElemType}}, cs chunks.ChunkSink) {{.Name}} {
	return New{{.Name}}({{$typesPackage}}WriteValue({{userToValue "val" .ElemType}}, cs))
}
