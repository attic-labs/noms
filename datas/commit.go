// This file was generated by nomdl/codegen.

package datas

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]types.Type{
		types.MakeStructType("Commit",
			[]types.Field{
				types.Field{"value", types.MakePrimitiveType(types.ValueKind), false},
				types.Field{"parents", types.MakeCompoundType(types.SetKind, types.MakeCompoundType(types.RefKind, types.MakeType(ref.Ref{}, 0))), false},
			},
			[]types.Field{},
		),
	}, []ref.Ref{})
	types.RegisterPackage(&p)
}

// Commit

type Commit struct {
	_value   types.Value
	_parents types.Set

	ref *ref.Ref
}

func NewCommit() Commit {
	return Commit{
		_value:   types.Bool(false),
		_parents: NewSetOfRefOfCommit(),

		ref: &ref.Ref{},
	}
}

var __typeForCommit types.Type

func (m Commit) Type() types.Type {
	return __typeForCommit
}

func init() {
	__typeForCommit = types.MakeType(ref.Parse("sha1-d8bf281149d5474072c87be999e961184bd9ec99"), 0)
	types.RegisterStruct(__typeForCommit, builderForCommit, readerForCommit)
}

func builderForCommit(values []types.Value) types.Value {
	i := 0
	s := Commit{ref: &ref.Ref{}}
	s._value = values[i]
	i++
	s._parents = values[i].(types.Set)
	i++
	return s
}

func readerForCommit(v types.Value) []types.Value {
	values := []types.Value{}
	s := v.(Commit)
	values = append(values, s._value)
	values = append(values, s._parents)
	return values
}

func (s Commit) Equals(other types.Value) bool {
	return other != nil && __typeForCommit.Equals(other.Type()) && s.Ref() == other.Ref()
}

func (s Commit) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s Commit) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, __typeForCommit.Chunks()...)
	chunks = append(chunks, s._value.Chunks()...)
	chunks = append(chunks, s._parents.Chunks()...)
	return
}

func (s Commit) ChildValues() (ret []types.Value) {
	ret = append(ret, s._value)
	ret = append(ret, s._parents)
	return
}

func (s Commit) Value() types.Value {
	return s._value
}

func (s Commit) SetValue(val types.Value) Commit {
	s._value = val
	s.ref = &ref.Ref{}
	return s
}

func (s Commit) Parents() types.Set {
	return s._parents
}

func (s Commit) SetParents(val types.Set) Commit {
	s._parents = val
	s.ref = &ref.Ref{}
	return s
}

func typeForMapOfStringToRefOfCommit() types.Type {
	return types.MakeMapType(types.StringType, types.MakeRefType(__typeForCommit))
}

func NewMapOfStringToRefOfCommit() types.Map {
	return types.NewTypedMap(typeForMapOfStringToRefOfCommit())
}

func typeForSetOfRefOfCommit() types.Type {
	return types.MakeSetType(types.MakeRefType(__typeForCommit))
}

func NewSetOfRefOfCommit() types.Set {
	return types.NewTypedSet(typeForSetOfRefOfCommit())
}
