// This file was generated by nomdl/codegen.

package main

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// MapOfStringToSetOfValue

type MapOfStringToSetOfValue struct {
	m types.Map
}

func NewMapOfStringToSetOfValue() MapOfStringToSetOfValue {
	return MapOfStringToSetOfValue{types.NewMap()}
}

type MapOfStringToSetOfValueDef map[string]SetOfValueDef

func (def MapOfStringToSetOfValueDef) New() MapOfStringToSetOfValue {
	kv := make([]types.Value, 0, len(def)*2)
	for k, v := range def {
		kv = append(kv, types.NewString(k), v.New().NomsValue())
	}
	return MapOfStringToSetOfValue{types.NewMap(kv...)}
}

func (m MapOfStringToSetOfValue) Def() MapOfStringToSetOfValueDef {
	def := make(map[string]SetOfValueDef)
	m.m.Iter(func(k, v types.Value) bool {
		def[k.(types.String).String()] = SetOfValueFromVal(v).Def()
		return false
	})
	return def
}

func MapOfStringToSetOfValueFromVal(p types.Value) MapOfStringToSetOfValue {
	// TODO: Validate here
	return MapOfStringToSetOfValue{p.(types.Map)}
}

func (m MapOfStringToSetOfValue) NomsValue() types.Value {
	return m.m
}

func (m MapOfStringToSetOfValue) Equals(other types.Value) bool {
	if other, ok := other.(MapOfStringToSetOfValue); ok {
		return m.m.Equals(other.m)
	}
	return false
}

func (m MapOfStringToSetOfValue) Ref() ref.Ref {
	return m.m.Ref()
}

func (m MapOfStringToSetOfValue) Chunks() (futures []types.Future) {
	futures = append(futures, m.TypeRef().Chunks()...)
	futures = append(futures, m.m.Chunks()...)
	return
}

// A Noms Value that describes MapOfStringToSetOfValue.
var __typeRefForMapOfStringToSetOfValue types.TypeRef

func (m MapOfStringToSetOfValue) TypeRef() types.TypeRef {
	return __typeRefForMapOfStringToSetOfValue
}

func init() {
	__typeRefForMapOfStringToSetOfValue = types.MakeCompoundTypeRef("", types.MapKind, types.MakePrimitiveTypeRef(types.StringKind), types.MakeCompoundTypeRef("", types.SetKind, types.MakePrimitiveTypeRef(types.ValueKind)))
	types.RegisterFromValFunction(__typeRefForMapOfStringToSetOfValue, func(v types.Value) types.NomsValue {
		return MapOfStringToSetOfValueFromVal(v)
	})
}

func (m MapOfStringToSetOfValue) Empty() bool {
	return m.m.Empty()
}

func (m MapOfStringToSetOfValue) Len() uint64 {
	return m.m.Len()
}

func (m MapOfStringToSetOfValue) Has(p string) bool {
	return m.m.Has(types.NewString(p))
}

func (m MapOfStringToSetOfValue) Get(p string) SetOfValue {
	return SetOfValueFromVal(m.m.Get(types.NewString(p)))
}

func (m MapOfStringToSetOfValue) MaybeGet(p string) (SetOfValue, bool) {
	v, ok := m.m.MaybeGet(types.NewString(p))
	if !ok {
		return NewSetOfValue(), false
	}
	return SetOfValueFromVal(v), ok
}

func (m MapOfStringToSetOfValue) Set(k string, v SetOfValue) MapOfStringToSetOfValue {
	return MapOfStringToSetOfValue{m.m.Set(types.NewString(k), v.NomsValue())}
}

// TODO: Implement SetM?

func (m MapOfStringToSetOfValue) Remove(p string) MapOfStringToSetOfValue {
	return MapOfStringToSetOfValue{m.m.Remove(types.NewString(p))}
}

type MapOfStringToSetOfValueIterCallback func(k string, v SetOfValue) (stop bool)

func (m MapOfStringToSetOfValue) Iter(cb MapOfStringToSetOfValueIterCallback) {
	m.m.Iter(func(k, v types.Value) bool {
		return cb(k.(types.String).String(), SetOfValueFromVal(v))
	})
}

type MapOfStringToSetOfValueIterAllCallback func(k string, v SetOfValue)

func (m MapOfStringToSetOfValue) IterAll(cb MapOfStringToSetOfValueIterAllCallback) {
	m.m.IterAll(func(k, v types.Value) {
		cb(k.(types.String).String(), SetOfValueFromVal(v))
	})
}

type MapOfStringToSetOfValueFilterCallback func(k string, v SetOfValue) (keep bool)

func (m MapOfStringToSetOfValue) Filter(cb MapOfStringToSetOfValueFilterCallback) MapOfStringToSetOfValue {
	nm := NewMapOfStringToSetOfValue()
	m.IterAll(func(k string, v SetOfValue) {
		if cb(k, v) {
			nm = nm.Set(k, v)
		}
	})
	return nm
}

// SetOfValue

type SetOfValue struct {
	s types.Set
}

func NewSetOfValue() SetOfValue {
	return SetOfValue{types.NewSet()}
}

type SetOfValueDef map[types.Value]bool

func (def SetOfValueDef) New() SetOfValue {
	l := make([]types.Value, len(def))
	i := 0
	for d, _ := range def {
		l[i] = d
		i++
	}
	return SetOfValue{types.NewSet(l...)}
}

func (s SetOfValue) Def() SetOfValueDef {
	def := make(map[types.Value]bool, s.Len())
	s.s.Iter(func(v types.Value) bool {
		def[v] = true
		return false
	})
	return def
}

func SetOfValueFromVal(p types.Value) SetOfValue {
	return SetOfValue{p.(types.Set)}
}

func (s SetOfValue) NomsValue() types.Value {
	return s.s
}

func (s SetOfValue) Equals(other types.Value) bool {
	if other, ok := other.(SetOfValue); ok {
		return s.s.Equals(other.s)
	}
	return false
}

func (s SetOfValue) Ref() ref.Ref {
	return s.s.Ref()
}

func (s SetOfValue) Chunks() (futures []types.Future) {
	futures = append(futures, s.TypeRef().Chunks()...)
	futures = append(futures, s.s.Chunks()...)
	return
}

// A Noms Value that describes SetOfValue.
var __typeRefForSetOfValue types.TypeRef

func (m SetOfValue) TypeRef() types.TypeRef {
	return __typeRefForSetOfValue
}

func init() {
	__typeRefForSetOfValue = types.MakeCompoundTypeRef("", types.SetKind, types.MakePrimitiveTypeRef(types.ValueKind))
	types.RegisterFromValFunction(__typeRefForSetOfValue, func(v types.Value) types.NomsValue {
		return SetOfValueFromVal(v)
	})
}

func (s SetOfValue) Empty() bool {
	return s.s.Empty()
}

func (s SetOfValue) Len() uint64 {
	return s.s.Len()
}

func (s SetOfValue) Has(p types.Value) bool {
	return s.s.Has(p)
}

type SetOfValueIterCallback func(p types.Value) (stop bool)

func (s SetOfValue) Iter(cb SetOfValueIterCallback) {
	s.s.Iter(func(v types.Value) bool {
		return cb(v)
	})
}

type SetOfValueIterAllCallback func(p types.Value)

func (s SetOfValue) IterAll(cb SetOfValueIterAllCallback) {
	s.s.IterAll(func(v types.Value) {
		cb(v)
	})
}

type SetOfValueFilterCallback func(p types.Value) (keep bool)

func (s SetOfValue) Filter(cb SetOfValueFilterCallback) SetOfValue {
	ns := NewSetOfValue()
	s.IterAll(func(v types.Value) {
		if cb(v) {
			ns = ns.Insert(v)
		}
	})
	return ns
}

func (s SetOfValue) Insert(p ...types.Value) SetOfValue {
	return SetOfValue{s.s.Insert(s.fromElemSlice(p)...)}
}

func (s SetOfValue) Remove(p ...types.Value) SetOfValue {
	return SetOfValue{s.s.Remove(s.fromElemSlice(p)...)}
}

func (s SetOfValue) Union(others ...SetOfValue) SetOfValue {
	return SetOfValue{s.s.Union(s.fromStructSlice(others)...)}
}

func (s SetOfValue) Subtract(others ...SetOfValue) SetOfValue {
	return SetOfValue{s.s.Subtract(s.fromStructSlice(others)...)}
}

func (s SetOfValue) Any() types.Value {
	return s.s.Any()
}

func (s SetOfValue) fromStructSlice(p []SetOfValue) []types.Set {
	r := make([]types.Set, len(p))
	for i, v := range p {
		r[i] = v.s
	}
	return r
}

func (s SetOfValue) fromElemSlice(p []types.Value) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v
	}
	return r
}
