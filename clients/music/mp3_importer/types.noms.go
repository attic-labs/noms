// This file was generated by nomdl/codegen.

package main

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]types.Type{
		types.MakeStructType("Song",
			[]types.Field{
				types.Field{"Title", types.MakePrimitiveType(types.StringKind), false},
				types.Field{"Artist", types.MakePrimitiveType(types.StringKind), false},
				types.Field{"Album", types.MakePrimitiveType(types.StringKind), false},
				types.Field{"Year", types.MakePrimitiveType(types.StringKind), false},
				types.Field{"Mp3", types.MakePrimitiveType(types.BlobKind), false},
			},
			types.Choices{},
		),
	}, []ref.Ref{})
	types.RegisterPackage(&p)
}

// Song

type Song struct {
	_Title  string
	_Artist string
	_Album  string
	_Year   string
	_Mp3    types.Blob

	ref *ref.Ref
}

func NewSong() Song {
	return Song{
		_Title:  "",
		_Artist: "",
		_Album:  "",
		_Year:   "",
		_Mp3:    types.NewEmptyBlob(),

		ref: &ref.Ref{},
	}
}

type SongDef struct {
	Title  string
	Artist string
	Album  string
	Year   string
	Mp3    types.Blob
}

func (def SongDef) New() Song {
	return Song{
		_Title:  def.Title,
		_Artist: def.Artist,
		_Album:  def.Album,
		_Year:   def.Year,
		_Mp3:    def.Mp3,
		ref:     &ref.Ref{},
	}
}

func (s Song) Def() (d SongDef) {
	d.Title = s._Title
	d.Artist = s._Artist
	d.Album = s._Album
	d.Year = s._Year
	d.Mp3 = s._Mp3
	return
}

var __typeForSong types.Type

func (m Song) Type() types.Type {
	return __typeForSong
}

func init() {
	__typeForSong = types.MakeType(ref.Parse("sha1-e8d7435377905892095ccb721a3b4e88f504589b"), 0)
	types.RegisterStruct(__typeForSong, builderForSong, readerForSong)
}

func builderForSong(values []types.Value) types.Value {
	i := 0
	s := Song{ref: &ref.Ref{}}
	s._Title = values[i].(types.String).String()
	i++
	s._Artist = values[i].(types.String).String()
	i++
	s._Album = values[i].(types.String).String()
	i++
	s._Year = values[i].(types.String).String()
	i++
	s._Mp3 = values[i].(types.Blob)
	i++
	return s
}

func readerForSong(v types.Value) []types.Value {
	values := []types.Value{}
	s := v.(Song)
	values = append(values, types.NewString(s._Title))
	values = append(values, types.NewString(s._Artist))
	values = append(values, types.NewString(s._Album))
	values = append(values, types.NewString(s._Year))
	values = append(values, s._Mp3)
	return values
}

func (s Song) Equals(other types.Value) bool {
	return other != nil && __typeForSong.Equals(other.Type()) && s.Ref() == other.Ref()
}

func (s Song) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s Song) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, __typeForSong.Chunks()...)
	chunks = append(chunks, s._Mp3.Chunks()...)
	return
}

func (s Song) ChildValues() (ret []types.Value) {
	ret = append(ret, types.NewString(s._Title))
	ret = append(ret, types.NewString(s._Artist))
	ret = append(ret, types.NewString(s._Album))
	ret = append(ret, types.NewString(s._Year))
	ret = append(ret, s._Mp3)
	return
}

func (s Song) Title() string {
	return s._Title
}

func (s Song) SetTitle(val string) Song {
	s._Title = val
	s.ref = &ref.Ref{}
	return s
}

func (s Song) Artist() string {
	return s._Artist
}

func (s Song) SetArtist(val string) Song {
	s._Artist = val
	s.ref = &ref.Ref{}
	return s
}

func (s Song) Album() string {
	return s._Album
}

func (s Song) SetAlbum(val string) Song {
	s._Album = val
	s.ref = &ref.Ref{}
	return s
}

func (s Song) Year() string {
	return s._Year
}

func (s Song) SetYear(val string) Song {
	s._Year = val
	s.ref = &ref.Ref{}
	return s
}

func (s Song) Mp3() types.Blob {
	return s._Mp3
}

func (s Song) SetMp3(val types.Blob) Song {
	s._Mp3 = val
	s.ref = &ref.Ref{}
	return s
}

// ListOfSong

type ListOfSong struct {
	l   types.List
	ref *ref.Ref
}

func NewListOfSong() ListOfSong {
	return ListOfSong{types.NewTypedList(__typeForListOfSong), &ref.Ref{}}
}

type ListOfSongDef []SongDef

func (def ListOfSongDef) New() ListOfSong {
	l := make([]types.Value, len(def))
	for i, d := range def {
		l[i] = d.New()
	}
	return ListOfSong{types.NewTypedList(__typeForListOfSong, l...), &ref.Ref{}}
}

func (l ListOfSong) Def() ListOfSongDef {
	d := make([]SongDef, l.Len())
	for i := uint64(0); i < l.Len(); i++ {
		d[i] = l.l.Get(i).(Song).Def()
	}
	return d
}

func (l ListOfSong) Equals(other types.Value) bool {
	return other != nil && __typeForListOfSong.Equals(other.Type()) && l.Ref() == other.Ref()
}

func (l ListOfSong) Ref() ref.Ref {
	return types.EnsureRef(l.ref, l)
}

func (l ListOfSong) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, l.Type().Chunks()...)
	chunks = append(chunks, l.l.Chunks()...)
	return
}

func (l ListOfSong) ChildValues() []types.Value {
	return append([]types.Value{}, l.l.ChildValues()...)
}

// A Noms Value that describes ListOfSong.
var __typeForListOfSong types.Type

func (m ListOfSong) Type() types.Type {
	return __typeForListOfSong
}

func init() {
	__typeForListOfSong = types.MakeCompoundType(types.ListKind, types.MakeType(ref.Parse("sha1-e8d7435377905892095ccb721a3b4e88f504589b"), 0))
	types.RegisterValue(__typeForListOfSong, builderForListOfSong, readerForListOfSong)
}

func builderForListOfSong(v types.Value) types.Value {
	return ListOfSong{v.(types.List), &ref.Ref{}}
}

func readerForListOfSong(v types.Value) types.Value {
	return v.(ListOfSong).l
}

func (l ListOfSong) Len() uint64 {
	return l.l.Len()
}

func (l ListOfSong) Empty() bool {
	return l.Len() == uint64(0)
}

func (l ListOfSong) Get(i uint64) Song {
	return l.l.Get(i).(Song)
}

func (l ListOfSong) Slice(idx uint64, end uint64) ListOfSong {
	return ListOfSong{l.l.Slice(idx, end), &ref.Ref{}}
}

func (l ListOfSong) Set(i uint64, val Song) ListOfSong {
	return ListOfSong{l.l.Set(i, val), &ref.Ref{}}
}

func (l ListOfSong) Append(v ...Song) ListOfSong {
	return ListOfSong{l.l.Append(l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfSong) Insert(idx uint64, v ...Song) ListOfSong {
	return ListOfSong{l.l.Insert(idx, l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfSong) Remove(idx uint64, end uint64) ListOfSong {
	return ListOfSong{l.l.Remove(idx, end), &ref.Ref{}}
}

func (l ListOfSong) RemoveAt(idx uint64) ListOfSong {
	return ListOfSong{(l.l.RemoveAt(idx)), &ref.Ref{}}
}

func (l ListOfSong) fromElemSlice(p []Song) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v
	}
	return r
}

type ListOfSongIterCallback func(v Song, i uint64) (stop bool)

func (l ListOfSong) Iter(cb ListOfSongIterCallback) {
	l.l.Iter(func(v types.Value, i uint64) bool {
		return cb(v.(Song), i)
	})
}

type ListOfSongIterAllCallback func(v Song, i uint64)

func (l ListOfSong) IterAll(cb ListOfSongIterAllCallback) {
	l.l.IterAll(func(v types.Value, i uint64) {
		cb(v.(Song), i)
	})
}

func (l ListOfSong) IterAllP(concurrency int, cb ListOfSongIterAllCallback) {
	l.l.IterAllP(concurrency, func(v types.Value, i uint64) {
		cb(v.(Song), i)
	})
}

type ListOfSongFilterCallback func(v Song, i uint64) (keep bool)

func (l ListOfSong) Filter(cb ListOfSongFilterCallback) ListOfSong {
	out := l.l.Filter(func(v types.Value, i uint64) bool {
		return cb(v.(Song), i)
	})
	return ListOfSong{out, &ref.Ref{}}
}
