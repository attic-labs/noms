// This file was generated by nomdl/codegen.

package main

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

var __mainPackageInFile_types_CachedRef = __mainPackageInFile_types_Ref()

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func __mainPackageInFile_types_Ref() ref.Ref {
	p := types.PackageDef{
		NamedTypes: types.MapOfStringToTypeRefDef{

			"Song": types.MakeStructTypeRef("Song",
				[]types.Field{
					types.Field{"Title", types.MakePrimitiveTypeRef(types.StringKind), false},
					types.Field{"Artist", types.MakePrimitiveTypeRef(types.StringKind), false},
					types.Field{"Album", types.MakePrimitiveTypeRef(types.StringKind), false},
					types.Field{"Year", types.MakePrimitiveTypeRef(types.StringKind), false},
					types.Field{"Mp3", types.MakePrimitiveTypeRef(types.BlobKind), false},
				},
				types.Choices{},
			),
		},
	}.New()
	return types.RegisterPackage(&p)
}

// ListOfSong

type ListOfSong struct {
	l types.List
}

func NewListOfSong() ListOfSong {
	return ListOfSong{types.NewList()}
}

type ListOfSongDef []SongDef

func (def ListOfSongDef) New() ListOfSong {
	l := make([]types.Value, len(def))
	for i, d := range def {
		l[i] = d.New().NomsValue()
	}
	return ListOfSong{types.NewList(l...)}
}

func (l ListOfSong) Def() ListOfSongDef {
	d := make([]SongDef, l.Len())
	for i := uint64(0); i < l.Len(); i++ {
		d[i] = SongFromVal(l.l.Get(i)).Def()
	}
	return d
}

func ListOfSongFromVal(val types.Value) ListOfSong {
	// TODO: Validate here
	return ListOfSong{val.(types.List)}
}

func (l ListOfSong) NomsValue() types.Value {
	return l.l
}

func (l ListOfSong) Equals(other types.Value) bool {
	if other, ok := other.(ListOfSong); ok {
		return l.l.Equals(other.l)
	}
	return false
}

func (l ListOfSong) Ref() ref.Ref {
	return l.l.Ref()
}

func (l ListOfSong) Chunks() []types.Future {
	return l.l.Chunks()
}

// A Noms Value that describes ListOfSong.
var __typeRefForListOfSong types.TypeRef

func (m ListOfSong) TypeRef() types.TypeRef {
	return __typeRefForListOfSong
}

func init() {
	__typeRefForListOfSong = types.MakeCompoundTypeRef("", types.ListKind, types.MakeTypeRef("Song", __mainPackageInFile_types_CachedRef))
	types.RegisterFromValFunction(__typeRefForListOfSong, func(v types.Value) types.NomsValue {
		return ListOfSongFromVal(v)
	})
}

func (l ListOfSong) Len() uint64 {
	return l.l.Len()
}

func (l ListOfSong) Empty() bool {
	return l.Len() == uint64(0)
}

func (l ListOfSong) Get(i uint64) Song {
	return SongFromVal(l.l.Get(i))
}

func (l ListOfSong) Slice(idx uint64, end uint64) ListOfSong {
	return ListOfSong{l.l.Slice(idx, end)}
}

func (l ListOfSong) Set(i uint64, val Song) ListOfSong {
	return ListOfSong{l.l.Set(i, val.NomsValue())}
}

func (l ListOfSong) Append(v ...Song) ListOfSong {
	return ListOfSong{l.l.Append(l.fromElemSlice(v)...)}
}

func (l ListOfSong) Insert(idx uint64, v ...Song) ListOfSong {
	return ListOfSong{l.l.Insert(idx, l.fromElemSlice(v)...)}
}

func (l ListOfSong) Remove(idx uint64, end uint64) ListOfSong {
	return ListOfSong{l.l.Remove(idx, end)}
}

func (l ListOfSong) RemoveAt(idx uint64) ListOfSong {
	return ListOfSong{(l.l.RemoveAt(idx))}
}

func (l ListOfSong) fromElemSlice(p []Song) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v.NomsValue()
	}
	return r
}

type ListOfSongIterCallback func(v Song, i uint64) (stop bool)

func (l ListOfSong) Iter(cb ListOfSongIterCallback) {
	l.l.Iter(func(v types.Value, i uint64) bool {
		return cb(SongFromVal(v), i)
	})
}

type ListOfSongIterAllCallback func(v Song, i uint64)

func (l ListOfSong) IterAll(cb ListOfSongIterAllCallback) {
	l.l.IterAll(func(v types.Value, i uint64) {
		cb(SongFromVal(v), i)
	})
}

type ListOfSongFilterCallback func(v Song, i uint64) (keep bool)

func (l ListOfSong) Filter(cb ListOfSongFilterCallback) ListOfSong {
	nl := NewListOfSong()
	l.IterAll(func(v Song, i uint64) {
		if cb(v, i) {
			nl = nl.Append(v)
		}
	})
	return nl
}

// Song

type Song struct {
	m types.Map
}

func NewSong() Song {
	return Song{types.NewMap(
		types.NewString("$name"), types.NewString("Song"),
		types.NewString("$type"), types.MakeTypeRef("Song", __mainPackageInFile_types_CachedRef),
		types.NewString("Title"), types.NewString(""),
		types.NewString("Artist"), types.NewString(""),
		types.NewString("Album"), types.NewString(""),
		types.NewString("Year"), types.NewString(""),
		types.NewString("Mp3"), types.NewEmptyBlob(),
	)}
}

type SongDef struct {
	Title  string
	Artist string
	Album  string
	Year   string
	Mp3    types.Blob
}

func (def SongDef) New() Song {
	return Song{
		types.NewMap(
			types.NewString("$name"), types.NewString("Song"),
			types.NewString("$type"), types.MakeTypeRef("Song", __mainPackageInFile_types_CachedRef),
			types.NewString("Title"), types.NewString(def.Title),
			types.NewString("Artist"), types.NewString(def.Artist),
			types.NewString("Album"), types.NewString(def.Album),
			types.NewString("Year"), types.NewString(def.Year),
			types.NewString("Mp3"), def.Mp3,
		)}
}

func (s Song) Def() (d SongDef) {
	d.Title = s.m.Get(types.NewString("Title")).(types.String).String()
	d.Artist = s.m.Get(types.NewString("Artist")).(types.String).String()
	d.Album = s.m.Get(types.NewString("Album")).(types.String).String()
	d.Year = s.m.Get(types.NewString("Year")).(types.String).String()
	d.Mp3 = s.m.Get(types.NewString("Mp3")).(types.Blob)
	return
}

var __typeRefForSong = types.MakeTypeRef("Song", __mainPackageInFile_types_CachedRef)

func (m Song) TypeRef() types.TypeRef {
	return __typeRefForSong
}

func init() {
	types.RegisterFromValFunction(__typeRefForSong, func(v types.Value) types.NomsValue {
		return SongFromVal(v)
	})
}

func SongFromVal(val types.Value) Song {
	// TODO: Validate here
	return Song{val.(types.Map)}
}

func (s Song) NomsValue() types.Value {
	return s.m
}

func (s Song) Equals(other types.Value) bool {
	if other, ok := other.(Song); ok {
		return s.m.Equals(other.m)
	}
	return false
}

func (s Song) Ref() ref.Ref {
	return s.m.Ref()
}

func (s Song) Chunks() []types.Future {
	return s.m.Chunks()
}

func (s Song) Title() string {
	return s.m.Get(types.NewString("Title")).(types.String).String()
}

func (s Song) SetTitle(val string) Song {
	return Song{s.m.Set(types.NewString("Title"), types.NewString(val))}
}

func (s Song) Artist() string {
	return s.m.Get(types.NewString("Artist")).(types.String).String()
}

func (s Song) SetArtist(val string) Song {
	return Song{s.m.Set(types.NewString("Artist"), types.NewString(val))}
}

func (s Song) Album() string {
	return s.m.Get(types.NewString("Album")).(types.String).String()
}

func (s Song) SetAlbum(val string) Song {
	return Song{s.m.Set(types.NewString("Album"), types.NewString(val))}
}

func (s Song) Year() string {
	return s.m.Get(types.NewString("Year")).(types.String).String()
}

func (s Song) SetYear(val string) Song {
	return Song{s.m.Set(types.NewString("Year"), types.NewString(val))}
}

func (s Song) Mp3() types.Blob {
	return s.m.Get(types.NewString("Mp3")).(types.Blob)
}

func (s Song) SetMp3(val types.Blob) Song {
	return Song{s.m.Set(types.NewString("Mp3"), val)}
}
