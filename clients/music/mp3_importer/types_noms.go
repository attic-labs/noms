// This file was generated by nomdl/codegen.

package main

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

var __mainPackageInFile_types_CachedRef ref.Ref

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]types.TypeRef{
		types.MakeStructTypeRef("Song",
			[]types.Field{
				types.Field{"Title", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"Artist", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"Album", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"Year", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"Mp3", types.MakePrimitiveTypeRef(types.BlobKind), false},
			},
			types.Choices{},
		),
	}, []ref.Ref{})
	__mainPackageInFile_types_CachedRef = types.RegisterPackage(&p)
}

// Song

type Song struct {
	m   types.Map
	ref *ref.Ref
}

func NewSong() Song {
	return Song{types.NewMap(
		types.NewString("Title"), types.NewString(""),
		types.NewString("Artist"), types.NewString(""),
		types.NewString("Album"), types.NewString(""),
		types.NewString("Year"), types.NewString(""),
		types.NewString("Mp3"), types.NewEmptyBlob(),
	), &ref.Ref{}}
}

type SongDef struct {
	Title  string
	Artist string
	Album  string
	Year   string
	Mp3    types.Blob
}

func (def SongDef) New() Song {
	return Song{
		types.NewMap(
			types.NewString("Title"), types.NewString(def.Title),
			types.NewString("Artist"), types.NewString(def.Artist),
			types.NewString("Album"), types.NewString(def.Album),
			types.NewString("Year"), types.NewString(def.Year),
			types.NewString("Mp3"), def.Mp3,
		), &ref.Ref{}}
}

func (s Song) Def() (d SongDef) {
	d.Title = s.m.Get(types.NewString("Title")).(types.String).String()
	d.Artist = s.m.Get(types.NewString("Artist")).(types.String).String()
	d.Album = s.m.Get(types.NewString("Album")).(types.String).String()
	d.Year = s.m.Get(types.NewString("Year")).(types.String).String()
	d.Mp3 = s.m.Get(types.NewString("Mp3")).(types.Blob)
	return
}

var __typeRefForSong types.TypeRef

func (m Song) TypeRef() types.TypeRef {
	return __typeRefForSong
}

func init() {
	__typeRefForSong = types.MakeTypeRef(__mainPackageInFile_types_CachedRef, 0)
	types.RegisterFromValFunction(__typeRefForSong, func(v types.Value) types.Value {
		return SongFromVal(v)
	})
}

func SongFromVal(val types.Value) Song {
	// TODO: Do we still need FromVal?
	if val, ok := val.(Song); ok {
		return val
	}
	// TODO: Validate here
	return Song{val.(types.Map), &ref.Ref{}}
}

func (s Song) InternalImplementation() types.Map {
	return s.m
}

func (s Song) Equals(other types.Value) bool {
	if other, ok := other.(Song); ok {
		return s.Ref() == other.Ref()
	}
	return false
}

func (s Song) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s Song) Chunks() (chunks []ref.Ref) {
	chunks = append(chunks, s.TypeRef().Chunks()...)
	chunks = append(chunks, s.m.Chunks()...)
	return
}

func (s Song) Title() string {
	return s.m.Get(types.NewString("Title")).(types.String).String()
}

func (s Song) SetTitle(val string) Song {
	return Song{s.m.Set(types.NewString("Title"), types.NewString(val)), &ref.Ref{}}
}

func (s Song) Artist() string {
	return s.m.Get(types.NewString("Artist")).(types.String).String()
}

func (s Song) SetArtist(val string) Song {
	return Song{s.m.Set(types.NewString("Artist"), types.NewString(val)), &ref.Ref{}}
}

func (s Song) Album() string {
	return s.m.Get(types.NewString("Album")).(types.String).String()
}

func (s Song) SetAlbum(val string) Song {
	return Song{s.m.Set(types.NewString("Album"), types.NewString(val)), &ref.Ref{}}
}

func (s Song) Year() string {
	return s.m.Get(types.NewString("Year")).(types.String).String()
}

func (s Song) SetYear(val string) Song {
	return Song{s.m.Set(types.NewString("Year"), types.NewString(val)), &ref.Ref{}}
}

func (s Song) Mp3() types.Blob {
	return s.m.Get(types.NewString("Mp3")).(types.Blob)
}

func (s Song) SetMp3(val types.Blob) Song {
	return Song{s.m.Set(types.NewString("Mp3"), val), &ref.Ref{}}
}

// ListOfSong

type ListOfSong struct {
	l   types.List
	ref *ref.Ref
}

func NewListOfSong() ListOfSong {
	return ListOfSong{types.NewList(), &ref.Ref{}}
}

type ListOfSongDef []SongDef

func (def ListOfSongDef) New() ListOfSong {
	l := make([]types.Value, len(def))
	for i, d := range def {
		l[i] = d.New()
	}
	return ListOfSong{types.NewList(l...), &ref.Ref{}}
}

func (l ListOfSong) Def() ListOfSongDef {
	d := make([]SongDef, l.Len())
	for i := uint64(0); i < l.Len(); i++ {
		d[i] = l.l.Get(i).(Song).Def()
	}
	return d
}

func ListOfSongFromVal(val types.Value) ListOfSong {
	// TODO: Do we still need FromVal?
	if val, ok := val.(ListOfSong); ok {
		return val
	}
	// TODO: Validate here
	return ListOfSong{val.(types.List), &ref.Ref{}}
}

func (l ListOfSong) InternalImplementation() types.List {
	return l.l
}

func (l ListOfSong) Equals(other types.Value) bool {
	if other, ok := other.(ListOfSong); ok {
		return l.Ref() == other.Ref()
	}
	return false
}

func (l ListOfSong) Ref() ref.Ref {
	return types.EnsureRef(l.ref, l)
}

func (l ListOfSong) Chunks() (chunks []ref.Ref) {
	chunks = append(chunks, l.TypeRef().Chunks()...)
	chunks = append(chunks, l.l.Chunks()...)
	return
}

// A Noms Value that describes ListOfSong.
var __typeRefForListOfSong types.TypeRef

func (m ListOfSong) TypeRef() types.TypeRef {
	return __typeRefForListOfSong
}

func init() {
	__typeRefForListOfSong = types.MakeCompoundTypeRef(types.ListKind, types.MakeTypeRef(__mainPackageInFile_types_CachedRef, 0))
	types.RegisterFromValFunction(__typeRefForListOfSong, func(v types.Value) types.Value {
		return ListOfSongFromVal(v)
	})
}

func (l ListOfSong) Len() uint64 {
	return l.l.Len()
}

func (l ListOfSong) Empty() bool {
	return l.Len() == uint64(0)
}

func (l ListOfSong) Get(i uint64) Song {
	return l.l.Get(i).(Song)
}

func (l ListOfSong) Slice(idx uint64, end uint64) ListOfSong {
	return ListOfSong{l.l.Slice(idx, end), &ref.Ref{}}
}

func (l ListOfSong) Set(i uint64, val Song) ListOfSong {
	return ListOfSong{l.l.Set(i, val), &ref.Ref{}}
}

func (l ListOfSong) Append(v ...Song) ListOfSong {
	return ListOfSong{l.l.Append(l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfSong) Insert(idx uint64, v ...Song) ListOfSong {
	return ListOfSong{l.l.Insert(idx, l.fromElemSlice(v)...), &ref.Ref{}}
}

func (l ListOfSong) Remove(idx uint64, end uint64) ListOfSong {
	return ListOfSong{l.l.Remove(idx, end), &ref.Ref{}}
}

func (l ListOfSong) RemoveAt(idx uint64) ListOfSong {
	return ListOfSong{(l.l.RemoveAt(idx)), &ref.Ref{}}
}

func (l ListOfSong) fromElemSlice(p []Song) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v
	}
	return r
}

type ListOfSongIterCallback func(v Song, i uint64) (stop bool)

func (l ListOfSong) Iter(cb ListOfSongIterCallback) {
	l.l.Iter(func(v types.Value, i uint64) bool {
		return cb(v.(Song), i)
	})
}

type ListOfSongIterAllCallback func(v Song, i uint64)

func (l ListOfSong) IterAll(cb ListOfSongIterAllCallback) {
	l.l.IterAll(func(v types.Value, i uint64) {
		cb(v.(Song), i)
	})
}

type ListOfSongFilterCallback func(v Song, i uint64) (keep bool)

func (l ListOfSong) Filter(cb ListOfSongFilterCallback) ListOfSong {
	nl := NewListOfSong()
	l.IterAll(func(v Song, i uint64) {
		if cb(v, i) {
			nl = nl.Append(v)
		}
	})
	return nl
}
