// This file was generated by nomdl/codegen.

package main

import (
	"github.com/attic-labs/noms/chunks"
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

var __mainPackageInFile_types_CachedRef ref.Ref

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]types.TypeRef{
		types.MakeStructTypeRef("User",
			[]types.Field{
				types.Field{"Id", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"Name", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"OAuthToken", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"OAuthSecret", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"Albums", types.MakeCompoundTypeRef(types.MapKind, types.MakePrimitiveTypeRef(types.StringKind), types.MakeTypeRef(ref.Ref{}, 1)), false},
			},
			types.Choices{},
		),
		types.MakeStructTypeRef("Album",
			[]types.Field{
				types.Field{"Id", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"Title", types.MakePrimitiveTypeRef(types.StringKind), false},
				types.Field{"Photos", types.MakeCompoundTypeRef(types.RefKind, types.MakeCompoundTypeRef(types.SetKind, types.MakeCompoundTypeRef(types.RefKind, types.MakeTypeRef(ref.Parse("sha1-00419ebbb418539af67238164b20341913efeb4d"), 0)))), false},
			},
			types.Choices{},
		),
	}, []ref.Ref{
		ref.Parse("sha1-00419ebbb418539af67238164b20341913efeb4d"),
	})
	__mainPackageInFile_types_CachedRef = types.RegisterPackage(&p)
}

// User

type User struct {
	m   types.Map
	ref *ref.Ref
}

func NewUser() User {
	return User{types.NewMap(
		types.NewString("Id"), types.NewString(""),
		types.NewString("Name"), types.NewString(""),
		types.NewString("OAuthToken"), types.NewString(""),
		types.NewString("OAuthSecret"), types.NewString(""),
		types.NewString("Albums"), NewMapOfStringToAlbum(),
	), &ref.Ref{}}
}

type UserDef struct {
	Id          string
	Name        string
	OAuthToken  string
	OAuthSecret string
	Albums      MapOfStringToAlbumDef
}

func (def UserDef) New() User {
	return User{
		types.NewMap(
			types.NewString("Id"), types.NewString(def.Id),
			types.NewString("Name"), types.NewString(def.Name),
			types.NewString("OAuthToken"), types.NewString(def.OAuthToken),
			types.NewString("OAuthSecret"), types.NewString(def.OAuthSecret),
			types.NewString("Albums"), def.Albums.New(),
		), &ref.Ref{}}
}

func (s User) Def() (d UserDef) {
	d.Id = s.m.Get(types.NewString("Id")).(types.String).String()
	d.Name = s.m.Get(types.NewString("Name")).(types.String).String()
	d.OAuthToken = s.m.Get(types.NewString("OAuthToken")).(types.String).String()
	d.OAuthSecret = s.m.Get(types.NewString("OAuthSecret")).(types.String).String()
	d.Albums = s.m.Get(types.NewString("Albums")).(MapOfStringToAlbum).Def()
	return
}

var __typeRefForUser types.TypeRef

func (m User) TypeRef() types.TypeRef {
	return __typeRefForUser
}

func init() {
	__typeRefForUser = types.MakeTypeRef(__mainPackageInFile_types_CachedRef, 0)
	types.RegisterFromValFunction(__typeRefForUser, func(v types.Value) types.Value {
		return UserFromVal(v)
	})
}

func UserFromVal(val types.Value) User {
	// TODO: Do we still need FromVal?
	if val, ok := val.(User); ok {
		return val
	}
	// TODO: Validate here
	return User{val.(types.Map), &ref.Ref{}}
}

func (s User) InternalImplementation() types.Map {
	return s.m
}

func (s User) Equals(other types.Value) bool {
	if other, ok := other.(User); ok {
		return s.Ref() == other.Ref()
	}
	return false
}

func (s User) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s User) Chunks() (chunks []ref.Ref) {
	chunks = append(chunks, s.TypeRef().Chunks()...)
	chunks = append(chunks, s.m.Chunks()...)
	return
}

func (s User) Id() string {
	return s.m.Get(types.NewString("Id")).(types.String).String()
}

func (s User) SetId(val string) User {
	return User{s.m.Set(types.NewString("Id"), types.NewString(val)), &ref.Ref{}}
}

func (s User) Name() string {
	return s.m.Get(types.NewString("Name")).(types.String).String()
}

func (s User) SetName(val string) User {
	return User{s.m.Set(types.NewString("Name"), types.NewString(val)), &ref.Ref{}}
}

func (s User) OAuthToken() string {
	return s.m.Get(types.NewString("OAuthToken")).(types.String).String()
}

func (s User) SetOAuthToken(val string) User {
	return User{s.m.Set(types.NewString("OAuthToken"), types.NewString(val)), &ref.Ref{}}
}

func (s User) OAuthSecret() string {
	return s.m.Get(types.NewString("OAuthSecret")).(types.String).String()
}

func (s User) SetOAuthSecret(val string) User {
	return User{s.m.Set(types.NewString("OAuthSecret"), types.NewString(val)), &ref.Ref{}}
}

func (s User) Albums() MapOfStringToAlbum {
	return s.m.Get(types.NewString("Albums")).(MapOfStringToAlbum)
}

func (s User) SetAlbums(val MapOfStringToAlbum) User {
	return User{s.m.Set(types.NewString("Albums"), val), &ref.Ref{}}
}

// Album

type Album struct {
	m   types.Map
	ref *ref.Ref
}

func NewAlbum() Album {
	return Album{types.NewMap(
		types.NewString("Id"), types.NewString(""),
		types.NewString("Title"), types.NewString(""),
		types.NewString("Photos"), NewRefOfSetOfRefOfRemotePhoto(ref.Ref{}),
	), &ref.Ref{}}
}

type AlbumDef struct {
	Id     string
	Title  string
	Photos ref.Ref
}

func (def AlbumDef) New() Album {
	return Album{
		types.NewMap(
			types.NewString("Id"), types.NewString(def.Id),
			types.NewString("Title"), types.NewString(def.Title),
			types.NewString("Photos"), NewRefOfSetOfRefOfRemotePhoto(def.Photos),
		), &ref.Ref{}}
}

func (s Album) Def() (d AlbumDef) {
	d.Id = s.m.Get(types.NewString("Id")).(types.String).String()
	d.Title = s.m.Get(types.NewString("Title")).(types.String).String()
	d.Photos = s.m.Get(types.NewString("Photos")).(RefOfSetOfRefOfRemotePhoto).TargetRef()
	return
}

var __typeRefForAlbum types.TypeRef

func (m Album) TypeRef() types.TypeRef {
	return __typeRefForAlbum
}

func init() {
	__typeRefForAlbum = types.MakeTypeRef(__mainPackageInFile_types_CachedRef, 1)
	types.RegisterFromValFunction(__typeRefForAlbum, func(v types.Value) types.Value {
		return AlbumFromVal(v)
	})
}

func AlbumFromVal(val types.Value) Album {
	// TODO: Do we still need FromVal?
	if val, ok := val.(Album); ok {
		return val
	}
	// TODO: Validate here
	return Album{val.(types.Map), &ref.Ref{}}
}

func (s Album) InternalImplementation() types.Map {
	return s.m
}

func (s Album) Equals(other types.Value) bool {
	if other, ok := other.(Album); ok {
		return s.Ref() == other.Ref()
	}
	return false
}

func (s Album) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s Album) Chunks() (chunks []ref.Ref) {
	chunks = append(chunks, s.TypeRef().Chunks()...)
	chunks = append(chunks, s.m.Chunks()...)
	return
}

func (s Album) Id() string {
	return s.m.Get(types.NewString("Id")).(types.String).String()
}

func (s Album) SetId(val string) Album {
	return Album{s.m.Set(types.NewString("Id"), types.NewString(val)), &ref.Ref{}}
}

func (s Album) Title() string {
	return s.m.Get(types.NewString("Title")).(types.String).String()
}

func (s Album) SetTitle(val string) Album {
	return Album{s.m.Set(types.NewString("Title"), types.NewString(val)), &ref.Ref{}}
}

func (s Album) Photos() RefOfSetOfRefOfRemotePhoto {
	return s.m.Get(types.NewString("Photos")).(RefOfSetOfRefOfRemotePhoto)
}

func (s Album) SetPhotos(val RefOfSetOfRefOfRemotePhoto) Album {
	return Album{s.m.Set(types.NewString("Photos"), val), &ref.Ref{}}
}

// MapOfStringToAlbum

type MapOfStringToAlbum struct {
	m   types.Map
	ref *ref.Ref
}

func NewMapOfStringToAlbum() MapOfStringToAlbum {
	return MapOfStringToAlbum{types.NewMap(), &ref.Ref{}}
}

type MapOfStringToAlbumDef map[string]AlbumDef

func (def MapOfStringToAlbumDef) New() MapOfStringToAlbum {
	kv := make([]types.Value, 0, len(def)*2)
	for k, v := range def {
		kv = append(kv, types.NewString(k), v.New())
	}
	return MapOfStringToAlbum{types.NewMap(kv...), &ref.Ref{}}
}

func (m MapOfStringToAlbum) Def() MapOfStringToAlbumDef {
	def := make(map[string]AlbumDef)
	m.m.Iter(func(k, v types.Value) bool {
		def[k.(types.String).String()] = v.(Album).Def()
		return false
	})
	return def
}

func MapOfStringToAlbumFromVal(val types.Value) MapOfStringToAlbum {
	// TODO: Do we still need FromVal?
	if val, ok := val.(MapOfStringToAlbum); ok {
		return val
	}
	// TODO: Validate here
	return MapOfStringToAlbum{val.(types.Map), &ref.Ref{}}
}

func (m MapOfStringToAlbum) InternalImplementation() types.Map {
	return m.m
}

func (m MapOfStringToAlbum) Equals(other types.Value) bool {
	if other, ok := other.(MapOfStringToAlbum); ok {
		return m.Ref() == other.Ref()
	}
	return false
}

func (m MapOfStringToAlbum) Ref() ref.Ref {
	return types.EnsureRef(m.ref, m)
}

func (m MapOfStringToAlbum) Chunks() (chunks []ref.Ref) {
	chunks = append(chunks, m.TypeRef().Chunks()...)
	chunks = append(chunks, m.m.Chunks()...)
	return
}

// A Noms Value that describes MapOfStringToAlbum.
var __typeRefForMapOfStringToAlbum types.TypeRef

func (m MapOfStringToAlbum) TypeRef() types.TypeRef {
	return __typeRefForMapOfStringToAlbum
}

func init() {
	__typeRefForMapOfStringToAlbum = types.MakeCompoundTypeRef(types.MapKind, types.MakePrimitiveTypeRef(types.StringKind), types.MakeTypeRef(__mainPackageInFile_types_CachedRef, 1))
	types.RegisterFromValFunction(__typeRefForMapOfStringToAlbum, func(v types.Value) types.Value {
		return MapOfStringToAlbumFromVal(v)
	})
}

func (m MapOfStringToAlbum) Empty() bool {
	return m.m.Empty()
}

func (m MapOfStringToAlbum) Len() uint64 {
	return m.m.Len()
}

func (m MapOfStringToAlbum) Has(p string) bool {
	return m.m.Has(types.NewString(p))
}

func (m MapOfStringToAlbum) Get(p string) Album {
	return m.m.Get(types.NewString(p)).(Album)
}

func (m MapOfStringToAlbum) MaybeGet(p string) (Album, bool) {
	v, ok := m.m.MaybeGet(types.NewString(p))
	if !ok {
		return NewAlbum(), false
	}
	return v.(Album), ok
}

func (m MapOfStringToAlbum) Set(k string, v Album) MapOfStringToAlbum {
	return MapOfStringToAlbum{m.m.Set(types.NewString(k), v), &ref.Ref{}}
}

// TODO: Implement SetM?

func (m MapOfStringToAlbum) Remove(p string) MapOfStringToAlbum {
	return MapOfStringToAlbum{m.m.Remove(types.NewString(p)), &ref.Ref{}}
}

type MapOfStringToAlbumIterCallback func(k string, v Album) (stop bool)

func (m MapOfStringToAlbum) Iter(cb MapOfStringToAlbumIterCallback) {
	m.m.Iter(func(k, v types.Value) bool {
		return cb(k.(types.String).String(), v.(Album))
	})
}

type MapOfStringToAlbumIterAllCallback func(k string, v Album)

func (m MapOfStringToAlbum) IterAll(cb MapOfStringToAlbumIterAllCallback) {
	m.m.IterAll(func(k, v types.Value) {
		cb(k.(types.String).String(), v.(Album))
	})
}

type MapOfStringToAlbumFilterCallback func(k string, v Album) (keep bool)

func (m MapOfStringToAlbum) Filter(cb MapOfStringToAlbumFilterCallback) MapOfStringToAlbum {
	nm := NewMapOfStringToAlbum()
	m.IterAll(func(k string, v Album) {
		if cb(k, v) {
			nm = nm.Set(k, v)
		}
	})
	return nm
}

// RefOfUser

type RefOfUser struct {
	target ref.Ref
	ref    *ref.Ref
}

func NewRefOfUser(target ref.Ref) RefOfUser {
	return RefOfUser{target, &ref.Ref{}}
}

func (r RefOfUser) TargetRef() ref.Ref {
	return r.target
}

func (r RefOfUser) Ref() ref.Ref {
	return types.EnsureRef(r.ref, r)
}

func (r RefOfUser) Equals(other types.Value) bool {
	if other, ok := other.(RefOfUser); ok {
		return r.Ref() == other.Ref()
	}
	return false
}

func (r RefOfUser) Chunks() []ref.Ref {
	return r.TypeRef().Chunks()
}

func RefOfUserFromVal(val types.Value) RefOfUser {
	// TODO: Do we still need FromVal?
	if val, ok := val.(RefOfUser); ok {
		return val
	}
	return NewRefOfUser(val.(types.Ref).TargetRef())
}

// A Noms Value that describes RefOfUser.
var __typeRefForRefOfUser types.TypeRef

func (m RefOfUser) TypeRef() types.TypeRef {
	return __typeRefForRefOfUser
}

func init() {
	__typeRefForRefOfUser = types.MakeCompoundTypeRef(types.RefKind, types.MakeTypeRef(__mainPackageInFile_types_CachedRef, 0))
	types.RegisterFromValFunction(__typeRefForRefOfUser, func(v types.Value) types.Value {
		return RefOfUserFromVal(v)
	})
}

func (r RefOfUser) TargetValue(cs chunks.ChunkSource) User {
	return types.ReadValue(r.target, cs).(User)
}

func (r RefOfUser) SetTargetValue(val User, cs chunks.ChunkSink) RefOfUser {
	return NewRefOfUser(types.WriteValue(val, cs))
}

// RefOfSetOfRefOfRemotePhoto

type RefOfSetOfRefOfRemotePhoto struct {
	target ref.Ref
	ref    *ref.Ref
}

func NewRefOfSetOfRefOfRemotePhoto(target ref.Ref) RefOfSetOfRefOfRemotePhoto {
	return RefOfSetOfRefOfRemotePhoto{target, &ref.Ref{}}
}

func (r RefOfSetOfRefOfRemotePhoto) TargetRef() ref.Ref {
	return r.target
}

func (r RefOfSetOfRefOfRemotePhoto) Ref() ref.Ref {
	return types.EnsureRef(r.ref, r)
}

func (r RefOfSetOfRefOfRemotePhoto) Equals(other types.Value) bool {
	if other, ok := other.(RefOfSetOfRefOfRemotePhoto); ok {
		return r.Ref() == other.Ref()
	}
	return false
}

func (r RefOfSetOfRefOfRemotePhoto) Chunks() []ref.Ref {
	return r.TypeRef().Chunks()
}

func RefOfSetOfRefOfRemotePhotoFromVal(val types.Value) RefOfSetOfRefOfRemotePhoto {
	// TODO: Do we still need FromVal?
	if val, ok := val.(RefOfSetOfRefOfRemotePhoto); ok {
		return val
	}
	return NewRefOfSetOfRefOfRemotePhoto(val.(types.Ref).TargetRef())
}

// A Noms Value that describes RefOfSetOfRefOfRemotePhoto.
var __typeRefForRefOfSetOfRefOfRemotePhoto types.TypeRef

func (m RefOfSetOfRefOfRemotePhoto) TypeRef() types.TypeRef {
	return __typeRefForRefOfSetOfRefOfRemotePhoto
}

func init() {
	__typeRefForRefOfSetOfRefOfRemotePhoto = types.MakeCompoundTypeRef(types.RefKind, types.MakeCompoundTypeRef(types.SetKind, types.MakeCompoundTypeRef(types.RefKind, types.MakeTypeRef(ref.Parse("sha1-00419ebbb418539af67238164b20341913efeb4d"), 0))))
	types.RegisterFromValFunction(__typeRefForRefOfSetOfRefOfRemotePhoto, func(v types.Value) types.Value {
		return RefOfSetOfRefOfRemotePhotoFromVal(v)
	})
}

func (r RefOfSetOfRefOfRemotePhoto) TargetValue(cs chunks.ChunkSource) SetOfRefOfRemotePhoto {
	return types.ReadValue(r.target, cs).(SetOfRefOfRemotePhoto)
}

func (r RefOfSetOfRefOfRemotePhoto) SetTargetValue(val SetOfRefOfRemotePhoto, cs chunks.ChunkSink) RefOfSetOfRefOfRemotePhoto {
	return NewRefOfSetOfRefOfRemotePhoto(types.WriteValue(val, cs))
}

// SetOfRefOfRemotePhoto

type SetOfRefOfRemotePhoto struct {
	s   types.Set
	ref *ref.Ref
}

func NewSetOfRefOfRemotePhoto() SetOfRefOfRemotePhoto {
	return SetOfRefOfRemotePhoto{types.NewSet(), &ref.Ref{}}
}

type SetOfRefOfRemotePhotoDef map[ref.Ref]bool

func (def SetOfRefOfRemotePhotoDef) New() SetOfRefOfRemotePhoto {
	l := make([]types.Value, len(def))
	i := 0
	for d, _ := range def {
		l[i] = NewRefOfRemotePhoto(d)
		i++
	}
	return SetOfRefOfRemotePhoto{types.NewSet(l...), &ref.Ref{}}
}

func (s SetOfRefOfRemotePhoto) Def() SetOfRefOfRemotePhotoDef {
	def := make(map[ref.Ref]bool, s.Len())
	s.s.Iter(func(v types.Value) bool {
		def[v.(RefOfRemotePhoto).TargetRef()] = true
		return false
	})
	return def
}

func SetOfRefOfRemotePhotoFromVal(val types.Value) SetOfRefOfRemotePhoto {
	// TODO: Do we still need FromVal?
	if val, ok := val.(SetOfRefOfRemotePhoto); ok {
		return val
	}
	return SetOfRefOfRemotePhoto{val.(types.Set), &ref.Ref{}}
}

func (s SetOfRefOfRemotePhoto) InternalImplementation() types.Set {
	return s.s
}

func (s SetOfRefOfRemotePhoto) Equals(other types.Value) bool {
	if other, ok := other.(SetOfRefOfRemotePhoto); ok {
		return s.Ref() == other.Ref()
	}
	return false
}

func (s SetOfRefOfRemotePhoto) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s SetOfRefOfRemotePhoto) Chunks() (chunks []ref.Ref) {
	chunks = append(chunks, s.TypeRef().Chunks()...)
	chunks = append(chunks, s.s.Chunks()...)
	return
}

// A Noms Value that describes SetOfRefOfRemotePhoto.
var __typeRefForSetOfRefOfRemotePhoto types.TypeRef

func (m SetOfRefOfRemotePhoto) TypeRef() types.TypeRef {
	return __typeRefForSetOfRefOfRemotePhoto
}

func init() {
	__typeRefForSetOfRefOfRemotePhoto = types.MakeCompoundTypeRef(types.SetKind, types.MakeCompoundTypeRef(types.RefKind, types.MakeTypeRef(ref.Parse("sha1-00419ebbb418539af67238164b20341913efeb4d"), 0)))
	types.RegisterFromValFunction(__typeRefForSetOfRefOfRemotePhoto, func(v types.Value) types.Value {
		return SetOfRefOfRemotePhotoFromVal(v)
	})
}

func (s SetOfRefOfRemotePhoto) Empty() bool {
	return s.s.Empty()
}

func (s SetOfRefOfRemotePhoto) Len() uint64 {
	return s.s.Len()
}

func (s SetOfRefOfRemotePhoto) Has(p RefOfRemotePhoto) bool {
	return s.s.Has(p)
}

type SetOfRefOfRemotePhotoIterCallback func(p RefOfRemotePhoto) (stop bool)

func (s SetOfRefOfRemotePhoto) Iter(cb SetOfRefOfRemotePhotoIterCallback) {
	s.s.Iter(func(v types.Value) bool {
		return cb(v.(RefOfRemotePhoto))
	})
}

type SetOfRefOfRemotePhotoIterAllCallback func(p RefOfRemotePhoto)

func (s SetOfRefOfRemotePhoto) IterAll(cb SetOfRefOfRemotePhotoIterAllCallback) {
	s.s.IterAll(func(v types.Value) {
		cb(v.(RefOfRemotePhoto))
	})
}

type SetOfRefOfRemotePhotoFilterCallback func(p RefOfRemotePhoto) (keep bool)

func (s SetOfRefOfRemotePhoto) Filter(cb SetOfRefOfRemotePhotoFilterCallback) SetOfRefOfRemotePhoto {
	ns := NewSetOfRefOfRemotePhoto()
	s.IterAll(func(v RefOfRemotePhoto) {
		if cb(v) {
			ns = ns.Insert(v)
		}
	})
	return ns
}

func (s SetOfRefOfRemotePhoto) Insert(p ...RefOfRemotePhoto) SetOfRefOfRemotePhoto {
	return SetOfRefOfRemotePhoto{s.s.Insert(s.fromElemSlice(p)...), &ref.Ref{}}
}

func (s SetOfRefOfRemotePhoto) Remove(p ...RefOfRemotePhoto) SetOfRefOfRemotePhoto {
	return SetOfRefOfRemotePhoto{s.s.Remove(s.fromElemSlice(p)...), &ref.Ref{}}
}

func (s SetOfRefOfRemotePhoto) Union(others ...SetOfRefOfRemotePhoto) SetOfRefOfRemotePhoto {
	return SetOfRefOfRemotePhoto{s.s.Union(s.fromStructSlice(others)...), &ref.Ref{}}
}

func (s SetOfRefOfRemotePhoto) Subtract(others ...SetOfRefOfRemotePhoto) SetOfRefOfRemotePhoto {
	return SetOfRefOfRemotePhoto{s.s.Subtract(s.fromStructSlice(others)...), &ref.Ref{}}
}

func (s SetOfRefOfRemotePhoto) Any() RefOfRemotePhoto {
	return s.s.Any().(RefOfRemotePhoto)
}

func (s SetOfRefOfRemotePhoto) fromStructSlice(p []SetOfRefOfRemotePhoto) []types.Set {
	r := make([]types.Set, len(p))
	for i, v := range p {
		r[i] = v.s
	}
	return r
}

func (s SetOfRefOfRemotePhoto) fromElemSlice(p []RefOfRemotePhoto) []types.Value {
	r := make([]types.Value, len(p))
	for i, v := range p {
		r[i] = v
	}
	return r
}

// RefOfRemotePhoto

type RefOfRemotePhoto struct {
	target ref.Ref
	ref    *ref.Ref
}

func NewRefOfRemotePhoto(target ref.Ref) RefOfRemotePhoto {
	return RefOfRemotePhoto{target, &ref.Ref{}}
}

func (r RefOfRemotePhoto) TargetRef() ref.Ref {
	return r.target
}

func (r RefOfRemotePhoto) Ref() ref.Ref {
	return types.EnsureRef(r.ref, r)
}

func (r RefOfRemotePhoto) Equals(other types.Value) bool {
	if other, ok := other.(RefOfRemotePhoto); ok {
		return r.Ref() == other.Ref()
	}
	return false
}

func (r RefOfRemotePhoto) Chunks() []ref.Ref {
	return r.TypeRef().Chunks()
}

func RefOfRemotePhotoFromVal(val types.Value) RefOfRemotePhoto {
	// TODO: Do we still need FromVal?
	if val, ok := val.(RefOfRemotePhoto); ok {
		return val
	}
	return NewRefOfRemotePhoto(val.(types.Ref).TargetRef())
}

// A Noms Value that describes RefOfRemotePhoto.
var __typeRefForRefOfRemotePhoto types.TypeRef

func (m RefOfRemotePhoto) TypeRef() types.TypeRef {
	return __typeRefForRefOfRemotePhoto
}

func init() {
	__typeRefForRefOfRemotePhoto = types.MakeCompoundTypeRef(types.RefKind, types.MakeTypeRef(ref.Parse("sha1-00419ebbb418539af67238164b20341913efeb4d"), 0))
	types.RegisterFromValFunction(__typeRefForRefOfRemotePhoto, func(v types.Value) types.Value {
		return RefOfRemotePhotoFromVal(v)
	})
}

func (r RefOfRemotePhoto) TargetValue(cs chunks.ChunkSource) RemotePhoto {
	return types.ReadValue(r.target, cs).(RemotePhoto)
}

func (r RefOfRemotePhoto) SetTargetValue(val RemotePhoto, cs chunks.ChunkSink) RefOfRemotePhoto {
	return NewRefOfRemotePhoto(types.WriteValue(val, cs))
}
