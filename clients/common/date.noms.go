// This file was generated by nomdl/codegen.

package common

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func init() {
	p := types.NewPackage([]*types.Type{
		types.MakeStructType("Date",
			[]types.Field{
				types.Field{"MsSinceEpoch", types.MakePrimitiveType(types.Int64Kind), false},
			},
			[]types.Field{},
		),
	}, []ref.Ref{})
	types.RegisterPackage(&p)
}

// Date

type Date struct {
	_MsSinceEpoch int64

	ref *ref.Ref
}

func NewDate() Date {
	return Date{
		_MsSinceEpoch: int64(0),

		ref: &ref.Ref{},
	}
}

type DateDef struct {
	MsSinceEpoch int64
}

func (def DateDef) New() Date {
	return Date{
		_MsSinceEpoch: def.MsSinceEpoch,
		ref:           &ref.Ref{},
	}
}

func (s Date) Def() (d DateDef) {
	d.MsSinceEpoch = s._MsSinceEpoch
	return
}

var __typeForDate *types.Type

func (m Date) Type() *types.Type {
	return __typeForDate
}

func init() {
	__typeForDate = types.MakeType(ref.Parse("sha1-0b4ac7cb0583d7fecd71a1584a3f846e5d8b08eb"), 0)
	types.RegisterStruct(__typeForDate, builderForDate, readerForDate)
}

func builderForDate(values []types.Value) types.Value {
	i := 0
	s := Date{ref: &ref.Ref{}}
	s._MsSinceEpoch = int64(values[i].(types.Int64))
	i++
	return s
}

func readerForDate(v types.Value) []types.Value {
	values := []types.Value{}
	s := v.(Date)
	values = append(values, types.Int64(s._MsSinceEpoch))
	return values
}

func (s Date) Equals(other types.Value) bool {
	return other != nil && __typeForDate.Equals(other.Type()) && s.Ref() == other.Ref()
}

func (s Date) Ref() ref.Ref {
	return types.EnsureRef(s.ref, s)
}

func (s Date) Chunks() (chunks []types.RefBase) {
	chunks = append(chunks, __typeForDate.Chunks()...)
	return
}

func (s Date) ChildValues() (ret []types.Value) {
	ret = append(ret, types.Int64(s._MsSinceEpoch))
	return
}

func (s Date) MsSinceEpoch() int64 {
	return s._MsSinceEpoch
}

func (s Date) SetMsSinceEpoch(val int64) Date {
	s._MsSinceEpoch = val
	s.ref = &ref.Ref{}
	return s
}
