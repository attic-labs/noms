// This file was generated by nomdl/codegen.

package sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517d

import (
	"github.com/attic-labs/noms/ref"
	"github.com/attic-labs/noms/types"
)

var __sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517dPackageInFile_sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517d_CachedRef = __sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517dPackageInFile_sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517d_Ref()

// This function builds up a Noms value that describes the type
// package implemented by this file and registers it with the global
// type package definition cache.
func __sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517dPackageInFile_sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517d_Ref() ref.Ref {
	p := types.NewPackage([]types.TypeRef{

		types.MakeStructTypeRef("Geoposition",
			[]types.Field{
				types.Field{"Latitude", types.MakePrimitiveTypeRef(types.Float32Kind), false},
				types.Field{"Longitude", types.MakePrimitiveTypeRef(types.Float32Kind), false},
			},
			types.Choices{},
		),
		types.MakeStructTypeRef("Georectangle",
			[]types.Field{
				types.Field{"TopLeft", types.MakeTypeRef(ref.Ref{}, 0), false},
				types.Field{"BottomRight", types.MakeTypeRef(ref.Ref{}, 0), false},
			},
			types.Choices{},
		),
	}, []ref.Ref{})
	return types.RegisterPackage(&p)
}

// Geoposition

type Geoposition struct {
	m types.Map
}

func NewGeoposition() Geoposition {
	return Geoposition{types.NewMap(
		types.NewString("$type"), types.MakeTypeRef(__sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517dPackageInFile_sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517d_CachedRef, 0),
		types.NewString("Latitude"), types.Float32(0),
		types.NewString("Longitude"), types.Float32(0),
	)}
}

type GeopositionDef struct {
	Latitude  float32
	Longitude float32
}

func (def GeopositionDef) New() Geoposition {
	return Geoposition{
		types.NewMap(
			types.NewString("$type"), types.MakeTypeRef(__sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517dPackageInFile_sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517d_CachedRef, 0),
			types.NewString("Latitude"), types.Float32(def.Latitude),
			types.NewString("Longitude"), types.Float32(def.Longitude),
		)}
}

func (s Geoposition) Def() (d GeopositionDef) {
	d.Latitude = float32(s.m.Get(types.NewString("Latitude")).(types.Float32))
	d.Longitude = float32(s.m.Get(types.NewString("Longitude")).(types.Float32))
	return
}

var __typeRefForGeoposition = types.MakeTypeRef(__sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517dPackageInFile_sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517d_CachedRef, 0)

func (m Geoposition) TypeRef() types.TypeRef {
	return __typeRefForGeoposition
}

func init() {
	types.RegisterFromValFunction(__typeRefForGeoposition, func(v types.Value) types.NomsValue {
		return GeopositionFromVal(v)
	})
}

func GeopositionFromVal(val types.Value) Geoposition {
	// TODO: Validate here
	return Geoposition{val.(types.Map)}
}

func (s Geoposition) NomsValue() types.Value {
	return s.m
}

func (s Geoposition) Equals(other types.Value) bool {
	if other, ok := other.(Geoposition); ok {
		return s.m.Equals(other.m)
	}
	return false
}

func (s Geoposition) Ref() ref.Ref {
	return s.m.Ref()
}

func (s Geoposition) Chunks() (futures []types.Future) {
	futures = append(futures, s.TypeRef().Chunks()...)
	futures = append(futures, s.m.Chunks()...)
	return
}

func (s Geoposition) Latitude() float32 {
	return float32(s.m.Get(types.NewString("Latitude")).(types.Float32))
}

func (s Geoposition) SetLatitude(val float32) Geoposition {
	return Geoposition{s.m.Set(types.NewString("Latitude"), types.Float32(val))}
}

func (s Geoposition) Longitude() float32 {
	return float32(s.m.Get(types.NewString("Longitude")).(types.Float32))
}

func (s Geoposition) SetLongitude(val float32) Geoposition {
	return Geoposition{s.m.Set(types.NewString("Longitude"), types.Float32(val))}
}

// Georectangle

type Georectangle struct {
	m types.Map
}

func NewGeorectangle() Georectangle {
	return Georectangle{types.NewMap(
		types.NewString("$type"), types.MakeTypeRef(__sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517dPackageInFile_sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517d_CachedRef, 1),
		types.NewString("TopLeft"), NewGeoposition().NomsValue(),
		types.NewString("BottomRight"), NewGeoposition().NomsValue(),
	)}
}

type GeorectangleDef struct {
	TopLeft     GeopositionDef
	BottomRight GeopositionDef
}

func (def GeorectangleDef) New() Georectangle {
	return Georectangle{
		types.NewMap(
			types.NewString("$type"), types.MakeTypeRef(__sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517dPackageInFile_sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517d_CachedRef, 1),
			types.NewString("TopLeft"), def.TopLeft.New().NomsValue(),
			types.NewString("BottomRight"), def.BottomRight.New().NomsValue(),
		)}
}

func (s Georectangle) Def() (d GeorectangleDef) {
	d.TopLeft = GeopositionFromVal(s.m.Get(types.NewString("TopLeft"))).Def()
	d.BottomRight = GeopositionFromVal(s.m.Get(types.NewString("BottomRight"))).Def()
	return
}

var __typeRefForGeorectangle = types.MakeTypeRef(__sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517dPackageInFile_sha1_52bbaa7c5bcb39759981ccb12ee457f21fa7517d_CachedRef, 1)

func (m Georectangle) TypeRef() types.TypeRef {
	return __typeRefForGeorectangle
}

func init() {
	types.RegisterFromValFunction(__typeRefForGeorectangle, func(v types.Value) types.NomsValue {
		return GeorectangleFromVal(v)
	})
}

func GeorectangleFromVal(val types.Value) Georectangle {
	// TODO: Validate here
	return Georectangle{val.(types.Map)}
}

func (s Georectangle) NomsValue() types.Value {
	return s.m
}

func (s Georectangle) Equals(other types.Value) bool {
	if other, ok := other.(Georectangle); ok {
		return s.m.Equals(other.m)
	}
	return false
}

func (s Georectangle) Ref() ref.Ref {
	return s.m.Ref()
}

func (s Georectangle) Chunks() (futures []types.Future) {
	futures = append(futures, s.TypeRef().Chunks()...)
	futures = append(futures, s.m.Chunks()...)
	return
}

func (s Georectangle) TopLeft() Geoposition {
	return GeopositionFromVal(s.m.Get(types.NewString("TopLeft")))
}

func (s Georectangle) SetTopLeft(val Geoposition) Georectangle {
	return Georectangle{s.m.Set(types.NewString("TopLeft"), val.NomsValue())}
}

func (s Georectangle) BottomRight() Geoposition {
	return GeopositionFromVal(s.m.Get(types.NewString("BottomRight")))
}

func (s Georectangle) SetBottomRight(val Geoposition) Georectangle {
	return Georectangle{s.m.Set(types.NewString("BottomRight"), val.NomsValue())}
}
